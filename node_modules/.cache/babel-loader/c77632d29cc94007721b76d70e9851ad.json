{"ast":null,"code":"var _jsxFileName = \"/Users/quinndarling/Desktop/beartracks-1.0/src/Components/CourseSearchTableComponent/CourseSearchTable.js\";\nimport React, { Component } from 'react';\nimport Division from '../DivisionComponent/Division';\nimport Requirement from '../RequirementComponent/Requirement';\nimport { Accordion, Navbar, Nav, Form, FormControl, Button } from 'react-bootstrap';\nimport courses from '../../courses.json';\nimport CourseButton from '../CourseButtonComponent/CourseButton';\nimport CompletedCourseButton from '../CompletedCourseButton/CompletedCourseButton';\nconst allCourses = Object.keys(courses);\n\nfunction getCoursesFromSemesters(semesters) {\n  var courseLists = [];\n\n  for (let i = 0; i < semesters.length; i++) {\n    courseLists.push(semesters[i][1]);\n  }\n\n  return [].concat.apply([], courseLists);\n}\n\nfunction isArray(value) {\n  return value && typeof value === 'object' && value.constructor === Array;\n}\n\nclass CourseSearchTable extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedCourse: \"\",\n      filteredComplete: [],\n      filteredIncomplete: [],\n      search: \"\",\n      selectedPlan: this.props.selectedPlan,\n      shouldUpdate: this.props.shouldUpdate\n    };\n    this.setSelectedCourse = this.setSelectedCourse.bind(this);\n    this.updateSearch = this.updateSearch.bind(this);\n    this.runSearch = this.runSearch.bind(this);\n    this.runSearchonEnter = this.runSearchonEnter.bind(this);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.setState({\n      shouldUpdate: nextProps.shouldUpdate\n    });\n  }\n\n  setSelectedCourse(course) {\n    if (this.state.selectedCourse === course) {\n      this.setState({\n        selectedCourse: \"\"\n      });\n    } else {\n      this.setState({\n        selectedCourse: course\n      });\n    }\n  }\n\n  runSearch() {\n    this.setState({\n      filteredComplete: [],\n      filteredIncomplete: []\n    });\n    var filteredList = allCourses.filter(course => {\n      return course.toLowerCase().indexOf(this.state.search.toLowerCase()) !== -1 || courses[course][\"Title\"].toLowerCase().indexOf(this.state.search.toLowerCase()) !== -1;\n    });\n    var userCourses = getCoursesFromSemesters(this.state.selectedPlan.semesters);\n    var filteredComplete = [];\n    var filteredIncomplete = [];\n\n    if (userCourses.length === 0) {\n      filteredIncomplete = filteredList;\n    } else {\n      for (let j = 0; j < userCourses.length; j++) {\n        for (let i = 0; i < filteredList.length; i++) {\n          if (filteredList[i] === userCourses[j]['Course']['Course']) {\n            filteredComplete.push(filteredList[i]);\n          } else {\n            filteredIncomplete.push(filteredList[i]);\n          }\n        }\n      }\n    }\n\n    this.setState({\n      filteredComplete: filteredComplete,\n      filteredIncomplete: filteredIncomplete\n    });\n  }\n\n  runSearchonEnter(event) {\n    if (event.key === \"Enter\") {\n      event.preventDefault();\n      this.setState({\n        filteredComplete: [],\n        filteredIncomplete: []\n      });\n      var filteredList = allCourses.filter(course => {\n        return course.toLowerCase().indexOf(this.state.search.toLowerCase()) !== -1 || courses[course][\"Title\"].toLowerCase().indexOf(this.state.search.toLowerCase()) !== -1;\n      });\n      var userCourses = getCoursesFromSemesters(this.state.selectedPlan.semesters);\n      var filteredComplete = [];\n      var filteredIncomplete = [];\n\n      if (userCourses.length === 0) {\n        filteredIncomplete = filteredList;\n      } else {\n        for (let j = 0; j < userCourses.length; j++) {\n          for (let i = 0; i < filteredList.length; i++) {\n            if (filteredList[i] === userCourses[j]['Course']['Course']) {\n              filteredComplete.push(filteredList[i]);\n            } else {\n              filteredIncomplete.push(filteredList[i]);\n            }\n          }\n        }\n      }\n\n      this.setState({\n        filteredComplete: filteredComplete,\n        filteredIncomplete: filteredIncomplete\n      });\n    }\n  }\n\n  updateSearch(event) {\n    var searchTerm = event.target.value;\n    this.setState({\n      filteredComplete: [],\n      filteredIncomplete: [],\n      search: searchTerm\n    });\n  }\n\n  handleSubmit(event) {\n    this.handleChange(event);\n    event.preventDefault();\n  }\n\n  handleDrop() {\n    this.props.progress();\n    this.props.onUpdate();\n    this.runSearch();\n  }\n\n  overlapping(course, plan, reqTitle, catTitle) {\n    debugger;\n    var categories = plan.collegeData.concat(plan.majorData, plan.minorData);\n    var catNames = plan.collegeNames.concat(plan.majorNames, plan.minorNames);\n    var reqs = [];\n\n    for (var i = 0; i < catNames.length; i++) {\n      var catReqs = categories[i][catNames[i]]['Requirements'];\n\n      for (var z = 0; z < catReqs.length; z++) {\n        var currReq = catReqs[z];\n        var courses = currReq['Course'];\n\n        if (courses[0] !== 'departmentsubgroup') {\n          let singleCourses = [];\n\n          for (let k = 0; k < courses.length; k++) {\n            if (!isArray(courses[k])) {\n              singleCourses.push(courses[k]);\n            } else {\n              for (let m = 0; m < courses[k].length; m++) singleCourses.push(courses[k][m]);\n            }\n          }\n\n          for (let x = 0; x < singleCourses.length; x++) {\n            if (singleCourses[x]['Course'] === course) {\n              if (reqTitle !== currReq['Requirement'] || catTitle !== catNames[i]) {\n                reqs.push(catNames[i] + \" >> \" + currReq['Division'] + \" >> \" + currReq['Requirement']);\n                break;\n              }\n            }\n          }\n        } else {\n          var groups = courses[1];\n\n          for (let q = 0; q < groups.length; q++) {\n            for (let p = 0; p < groups[q][1].length; p++) {\n              if (groups[q][1][p] === course) {\n                if (reqTitle !== currReq['Requirement'] || catTitle !== catNames[i]) {\n                  reqs.push(catNames[i] + \" >> \" + currReq['Division'] + \" >> \" + currReq['Requirement']);\n                  break;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return reqs;\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, React.createElement(Navbar, {\n      bg: \"primary\",\n      variant: \"dark\",\n      className: \"SearchCourses\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      className: \"backToDivisions\",\n      onClick: () => this.props.showDivisions(),\n      src: require(\"../../Images/backarrow.png\"),\n      height: \"30\",\n      width: \"30\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }), React.createElement(Form, {\n      inline: true,\n      className: \"CourseSearchForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }, React.createElement(FormControl, {\n      className: \"CourseSearchBar\",\n      type: \"text\",\n      onChange: this.updateSearch,\n      onKeyPress: this.runSearchonEnter,\n      value: this.state.search,\n      placeholder: \"Search for a course\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"RequirementTable\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, React.createElement(Accordion, {\n      className: \"CourseSearchList\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }, this.state.filteredComplete.map((course, index) => {\n      return React.createElement(CompletedCourseButton, {\n        Course: courses[course],\n        courseNumber: courses[course]['Course'],\n        courseTitle: courses[course]['Title'],\n        courseUnits: courses[course]['Units'],\n        key: courses[course]['Course'],\n        courseDescription: courses[course]['Desc'],\n        handleClick: () => this.setSelectedCourse(course),\n        isSelected: this.state.selectedCourse === course,\n        overlapping: this.overlapping(course, this.state.selectedPlan, '', ''),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      });\n    }), this.state.filteredIncomplete.map((course, index) => {\n      return React.createElement(CourseButton, {\n        Course: courses[course],\n        courseNumber: courses[course]['Course'],\n        courseTitle: courses[course]['Title'],\n        courseUnits: courses[course]['Units'],\n        key: courses[course]['Course'],\n        courseDescription: courses[course]['Desc'],\n        handleClick: () => this.setSelectedCourse(course),\n        handleDrop: () => this.handleDrop(),\n        isSelected: this.state.selectedCourse === course,\n        overlapping: this.overlapping(course, this.state.selectedPlan, '', ''),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224\n        },\n        __self: this\n      });\n    }))));\n  }\n\n}\n\nexport default CourseSearchTable;","map":{"version":3,"sources":["/Users/quinndarling/Desktop/beartracks-1.0/src/Components/CourseSearchTableComponent/CourseSearchTable.js"],"names":["React","Component","Division","Requirement","Accordion","Navbar","Nav","Form","FormControl","Button","courses","CourseButton","CompletedCourseButton","allCourses","Object","keys","getCoursesFromSemesters","semesters","courseLists","i","length","push","concat","apply","isArray","value","constructor","Array","CourseSearchTable","props","state","selectedCourse","filteredComplete","filteredIncomplete","search","selectedPlan","shouldUpdate","setSelectedCourse","bind","updateSearch","runSearch","runSearchonEnter","componentWillReceiveProps","nextProps","setState","course","filteredList","filter","toLowerCase","indexOf","userCourses","j","event","key","preventDefault","searchTerm","target","handleSubmit","handleChange","handleDrop","progress","onUpdate","overlapping","plan","reqTitle","catTitle","categories","collegeData","majorData","minorData","catNames","collegeNames","majorNames","minorNames","reqs","catReqs","z","currReq","singleCourses","k","m","x","groups","q","p","render","showDivisions","require","map","index"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport Division from '../DivisionComponent/Division'; \nimport Requirement from '../RequirementComponent/Requirement';\nimport {Accordion, Navbar, Nav, Form, FormControl, Button} from 'react-bootstrap';\nimport courses from '../../courses.json'\nimport CourseButton from '../CourseButtonComponent/CourseButton';\nimport CompletedCourseButton from '../CompletedCourseButton/CompletedCourseButton';\n\nconst allCourses = Object.keys(courses);\n\n\nfunction getCoursesFromSemesters(semesters) {\n    var courseLists = [];\n    for (let i = 0; i < semesters.length; i++) {\n        courseLists.push(semesters[i][1])\n    }\n    return ([].concat.apply([], courseLists))\n}\n\nfunction isArray(value) {\n    return value && typeof value === 'object' && value.constructor === Array;\n}\n\nclass CourseSearchTable extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            selectedCourse: \"\",\n            filteredComplete:[],\n            filteredIncomplete:[],\n            search: \"\",\n            selectedPlan: this.props.selectedPlan,\n            shouldUpdate: this.props.shouldUpdate\n        }\n\n        this.setSelectedCourse = this.setSelectedCourse.bind(this);\n        this.updateSearch = this.updateSearch.bind(this);\n        this.runSearch = this.runSearch.bind(this);\n        this.runSearchonEnter = this.runSearchonEnter.bind(this);\n    }\n\n    componentWillReceiveProps(nextProps) {\n        this.setState({ shouldUpdate: nextProps.shouldUpdate });  \n      }\n\n    setSelectedCourse(course) {\n        if (this.state.selectedCourse === course) {\n        this.setState({\n            selectedCourse: \"\"\n        })}\n        else {\n            this.setState({\n                selectedCourse: course\n            })}\n    }\n\n    runSearch() {\n        this.setState({\n            filteredComplete: [],\n            filteredIncomplete: []\n        })\n        var filteredList = allCourses.filter(course => {\n            return (course.toLowerCase().indexOf(this.state.search.toLowerCase()) !== -1 || courses[course][\"Title\"].toLowerCase().indexOf(this.state.search.toLowerCase()) !== -1);\n        })\n        var userCourses = getCoursesFromSemesters(this.state.selectedPlan.semesters)\n        var filteredComplete = []\n        var filteredIncomplete = []\n\n        if (userCourses.length === 0) {\n            filteredIncomplete = filteredList\n        } else {\n\n        for (let j = 0; j < userCourses.length; j++) {\n            for (let i = 0; i < filteredList.length; i ++) {\n                if (filteredList[i] === userCourses[j]['Course']['Course']) {\n                    filteredComplete.push(filteredList[i])\n                } else {\n                    filteredIncomplete.push(filteredList[i])\n                }\n            }\n        }\n    }\n\n        this.setState({\n            filteredComplete: filteredComplete,\n            filteredIncomplete: filteredIncomplete});\n      }\n\n      runSearchonEnter(event) {\n        if (event.key === \"Enter\") {\n            event.preventDefault();\n            this.setState({\n                filteredComplete: [],\n                filteredIncomplete: []\n            })\n            var filteredList = allCourses.filter(course => {\n                return (course.toLowerCase().indexOf(this.state.search.toLowerCase()) !== -1 || courses[course][\"Title\"].toLowerCase().indexOf(this.state.search.toLowerCase()) !== -1);\n            })\n            \n        var userCourses = getCoursesFromSemesters(this.state.selectedPlan.semesters)\n        var filteredComplete = []\n        var filteredIncomplete = []\n\n        if (userCourses.length === 0) {\n            filteredIncomplete = filteredList\n        } else {\n\n        for (let j = 0; j < userCourses.length; j++) {\n            for (let i = 0; i < filteredList.length; i ++) {\n                if (filteredList[i] === userCourses[j]['Course']['Course']) {\n                    filteredComplete.push(filteredList[i])\n                } else {\n                    filteredIncomplete.push(filteredList[i])\n                }\n            }\n        }\n    }\n\n        this.setState({\n            filteredComplete: filteredComplete,\n            filteredIncomplete: filteredIncomplete});\n      }\n      }\n    \n\n    updateSearch(event) {\n        var searchTerm = event.target.value;\n        \n        this.setState({\n            filteredComplete: [],\n            filteredIncomplete: [],\n            search: searchTerm});\n      }\n    \n    handleSubmit(event) {\n        this.handleChange(event)\n        event.preventDefault();\n      }\n\n    handleDrop() {\n        this.props.progress();\n        this.props.onUpdate();\n        this.runSearch();\n    }\n\n    overlapping(course, plan, reqTitle, catTitle) {\n        debugger;\n        var categories = plan.collegeData.concat(plan.majorData, plan.minorData);\n        var catNames = plan.collegeNames.concat(plan.majorNames, plan.minorNames); \n        var reqs = [];\n        for (var i = 0; i < catNames.length; i++) {\n            var catReqs = categories[i][catNames[i]]['Requirements']\n            for (var z = 0; z < catReqs.length; z++) {\n                var currReq = catReqs[z]\n                    var courses = currReq['Course'];\n                    if (courses[0] !== 'departmentsubgroup') {\n                        let singleCourses = [];\n\n                        for (let k = 0; k < courses.length; k++) {\n                            if (!isArray(courses[k])) {\n                                singleCourses.push(courses[k])\n                            } else {\n                                for (let m = 0; m < courses[k].length; m++)\n                                    singleCourses.push(courses[k][m])\n                            }\n                        }\n\n                        for (let x = 0; x < singleCourses.length; x++) {\n                            if (singleCourses[x]['Course'] === course) {\n                                if (reqTitle !== currReq['Requirement'] || catTitle !== catNames[i]) {\n                                    reqs.push(catNames[i] + \" >> \" + currReq['Division'] + \" >> \" + currReq['Requirement'])\n                                    break;\n                                }\n                            }\n                        }\n                    } else {\n                        var groups = courses[1];\n                        for (let q = 0; q < groups.length; q++) {\n                            for (let p = 0; p < groups[q][1].length; p++) {\n                                if (groups[q][1][p] === course) {\n                                        if (reqTitle !== currReq['Requirement'] || catTitle !== catNames[i]) {\n                                        reqs.push(catNames[i] + \" >> \" + currReq['Division'] + \" >> \" + currReq['Requirement'])\n                                        break;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n        return reqs;\n    }\n\n    render() {\n\n        return (\n            <div>\n                <Navbar bg = \"primary\" variant = 'dark' className=\"SearchCourses\">\n                    <img className = 'backToDivisions' onClick = {()=>this.props.showDivisions()} src={require(\"../../Images/backarrow.png\")} height=\"30\" width=\"30\"/>\n                    <Form inline className = 'CourseSearchForm'>\n                        <FormControl className = 'CourseSearchBar' type=\"text\" onChange = {this.updateSearch} onKeyPress={this.runSearchonEnter} value = {this.state.search} placeholder=\"Search for a course\"/>\n                    </Form>\n                </Navbar>\n                <div className=\"RequirementTable\">\n                    <Accordion className = 'CourseSearchList'>\n                        {this.state.filteredComplete.map((course, index)=> {\n                            return (\n                                <CompletedCourseButton\n                                Course={courses[course]}\n                                courseNumber={courses[course]['Course']}\n                                courseTitle={courses[course]['Title']}\n                                courseUnits={courses[course]['Units']} \n                                key = {courses[course]['Course']}\n                                courseDescription = {courses[course]['Desc']}\n                                handleClick = {()=>this.setSelectedCourse(course)}\n                                isSelected = {this.state.selectedCourse === course}\n                                overlapping = {this.overlapping(course, this.state.selectedPlan, '', '')}/>\n                            )\n                        })}\n                        {this.state.filteredIncomplete.map((course, index) => {\n                        return (\n                                <CourseButton\n                                Course={courses[course]}\n                                courseNumber={courses[course]['Course']}\n                                courseTitle={courses[course]['Title']}\n                                courseUnits={courses[course]['Units']} \n                                key = {courses[course]['Course']}\n                                courseDescription = {courses[course]['Desc']}\n                                handleClick = {()=>this.setSelectedCourse(course)}\n                                handleDrop = {()=>this.handleDrop()}\n                                isSelected = {this.state.selectedCourse === course}\n                                overlapping = {this.overlapping(course, this.state.selectedPlan, '', '')}/>\n                        )})}\n                    </Accordion>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default CourseSearchTable;"]},"metadata":{},"sourceType":"module"}