{"ast":null,"code":"var _jsxFileName = \"/Users/quinndarling/Desktop/BearTracks/src/Components/SubGroupComponent/SubGroup.js\";\nimport React, { Component } from 'react';\nimport CourseButton from '../CourseButtonComponent/CourseButton';\nimport CompletedCourseButton from '../CompletedCourseButton/CompletedCourseButton';\nimport { Card, Collapse } from 'react-bootstrap';\n\nfunction getCoursesFromSemesters(semesters) {\n  var courseLists = [];\n\n  for (let i = 0; i < semesters.length; i++) {\n    courseLists.push(semesters[i][1]);\n  }\n\n  return [].concat.apply([], courseLists);\n}\n\nclass SubGroup extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      courses: this.props.courses,\n      completedCourses: [],\n      showCourses: false,\n      selectedCourse: \"\",\n      selectedPlan: this.props.selectedPlan,\n      shouldUpdate: this.props.shouldUpdate\n    };\n    this.toggleShowCourses = this.toggleShowCourses.bind(this);\n    this.checkCompletedCourses = this.checkCompletedCourses.bind(this);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.setState({\n      selectedPlan: nextProps.selectedPlan,\n      shouldUpdate: nextProps.shouldUpdate\n    });\n  }\n\n  toggleShowCourses() {\n    this.setState({\n      showCourses: !this.state.showCourses,\n      selectedCourse: ''\n    });\n  }\n\n  setSelectedCourse(course) {\n    if (course === this.state.selectedCourse) {\n      this.setState({\n        selectedCourse: ''\n      });\n    } else {\n      this.setState({\n        selectedCourse: course\n      });\n    }\n  }\n\n  checkCompletedCourses() {\n    let userCourses = getCoursesFromSemesters(this.state.selectedPlan.semesters);\n    let Courses = this.props.courses;\n    let compCourse = [];\n    let coursesCopy = Courses.slice();\n\n    for (let i = Courses.length - 1; i >= 0; i--) {\n      for (let j = userCourses.length - 1; j >= 0; j--) {\n        if (Courses[i]['Course'] === userCourses[j]['Course']['Course']) {\n          compCourse.push(Courses[i]);\n\n          for (let k = coursesCopy.length - 1; k >= 0; k--) {\n            if (coursesCopy[k]['Course'] === Courses[i]['Course']) {\n              coursesCopy.splice(k, 1);\n            }\n          }\n        }\n      }\n    }\n\n    this.setState({\n      courses: coursesCopy,\n      completedCourses: compCourse\n    });\n    this.props.progress();\n    this.props.handleDrop();\n  }\n\n  render() {\n    let userCourses = getCoursesFromSemesters(this.state.selectedPlan.semesters);\n    let Courses = this.props.courses;\n    let compCourse = [];\n    let coursesCopy = Courses.slice();\n\n    for (let i = Courses.length - 1; i >= 0; i--) {\n      for (let j = userCourses.length - 1; j >= 0; j--) {\n        if (Courses[i]['Course'] === userCourses[j]['Course']['Course']) {\n          compCourse.push(Courses[i]);\n\n          for (let k = coursesCopy.length - 1; k >= 0; k--) {\n            if (coursesCopy[k]['Course'] === Courses[i]['Course']) {\n              coursesCopy.splice(k, 1);\n            }\n          }\n        }\n      }\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(Card, {\n      className: \"SubgroupCard\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(Card.Header, {\n      className: \"SubgroupCardHeader\",\n      onClick: () => this.toggleShowCourses(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, this.props.name), React.createElement(Collapse, {\n      className: \"SubgroupCollapse\",\n      in: this.state.showCourses,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, compCourse.map((course, index) => React.createElement(CompletedCourseButton, {\n      planIndex: this.props.planIndex,\n      Course: course,\n      courseNumber: course['Course'],\n      courseTitle: course['Title'],\n      courseUnits: course['Units'],\n      key: course['Title'],\n      handleClick: () => this.setSelectedCourse(course),\n      isSelected: this.state.selectedCourse === course,\n      courseDescription: course['Desc'],\n      courseTerms: course['Terms'],\n      coursePres: course['Pres'],\n      overlapping: this.props.overlapping(course, this.props.selectedPlan, this.props.requirementTitle, this.props.selectedCategory),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    })), coursesCopy.map((course, index) => React.createElement(CourseButton, {\n      className: \"SubgroupCourse\",\n      Course: course,\n      courseNumber: course['Course'],\n      courseTitle: course['Title'],\n      courseUnits: course['Units'],\n      key: course['Title'],\n      handleDrop: () => this.checkCompletedCourses(),\n      handleClick: () => this.setSelectedCourse(course['Course']),\n      isSelected: this.state.selectedCourse === course['Course'],\n      courseDescription: course['Desc'],\n      overlapping: this.props.overlapping(course, this.props.selectedPlan, this.props.requirementTitle, this.props.selectedCategory),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default SubGroup;","map":{"version":3,"sources":["/Users/quinndarling/Desktop/BearTracks/src/Components/SubGroupComponent/SubGroup.js"],"names":["React","Component","CourseButton","CompletedCourseButton","Card","Collapse","getCoursesFromSemesters","semesters","courseLists","i","length","push","concat","apply","SubGroup","constructor","props","state","courses","completedCourses","showCourses","selectedCourse","selectedPlan","shouldUpdate","toggleShowCourses","bind","checkCompletedCourses","componentWillReceiveProps","nextProps","setState","setSelectedCourse","course","userCourses","Courses","compCourse","coursesCopy","slice","j","k","splice","progress","handleDrop","render","name","map","index","planIndex","overlapping","requirementTitle","selectedCategory"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport CourseButton from '../CourseButtonComponent/CourseButton';\nimport CompletedCourseButton from '../CompletedCourseButton/CompletedCourseButton'\nimport { Card, Collapse } from 'react-bootstrap';\n\nfunction getCoursesFromSemesters(semesters) {\n    var courseLists = [];\n    for (let i = 0; i < semesters.length; i++) {\n        courseLists.push(semesters[i][1])\n    }\n    return ([].concat.apply([], courseLists))\n}\n\nclass SubGroup extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            courses: this.props.courses,\n            completedCourses: [],\n            showCourses: false,\n            selectedCourse: \"\",\n            selectedPlan: this.props.selectedPlan,\n            shouldUpdate: this.props.shouldUpdate\n        }\n        this.toggleShowCourses = this.toggleShowCourses.bind(this);\n        this.checkCompletedCourses = this.checkCompletedCourses.bind(this);\n    }\n\n    componentWillReceiveProps(nextProps) {\n        this.setState({ \n            selectedPlan: nextProps.selectedPlan,\n            shouldUpdate: nextProps.shouldUpdate})  \n      }\n\n    toggleShowCourses() {\n        this.setState({\n            showCourses:!this.state.showCourses,\n            selectedCourse: ''\n        })\n    }\n\n    setSelectedCourse(course) {\n        if (course === this.state.selectedCourse) {\n            this.setState({\n                selectedCourse: ''\n            })\n        } else {\n            this.setState({\n            selectedCourse: course\n        })\n        }\n    }\n    \n\n    checkCompletedCourses() {\n        let userCourses = getCoursesFromSemesters(this.state.selectedPlan.semesters);\n        let Courses = this.props.courses;\n        let compCourse = [];\n        let coursesCopy = Courses.slice();\n        for (let i = Courses.length -1 ; i >= 0; i--) {\n            for (let j = userCourses.length -1; j >= 0; j--) {\n                if(Courses[i]['Course'] === userCourses[j]['Course']['Course']) {\n                    compCourse.push(Courses[i]);\n                    for (let k = coursesCopy.length - 1; k >= 0; k--) {\n                        if (coursesCopy[k]['Course'] === Courses[i]['Course']) {\n                            coursesCopy.splice(k, 1);\n                        }\n                    }\n                    \n                }\n            }\n        }\n        this.setState({\n            courses: coursesCopy,\n            completedCourses: compCourse\n        })\n        this.props.progress();\n        this.props.handleDrop();\n    }\n\n    render() {\n        let userCourses = getCoursesFromSemesters(this.state.selectedPlan.semesters);\n        let Courses = this.props.courses;\n        let compCourse = [];\n        let coursesCopy = Courses.slice();\n        for (let i = Courses.length -1 ; i >= 0; i--) {\n            for (let j = userCourses.length -1; j >= 0; j--) {\n                if(Courses[i]['Course'] === userCourses[j]['Course']['Course']) {\n                    compCourse.push(Courses[i]);\n                    for (let k = coursesCopy.length - 1; k >= 0; k--) {\n                        if (coursesCopy[k]['Course'] === Courses[i]['Course']) {\n                            coursesCopy.splice(k, 1);\n                        }\n                    }\n                    \n                }\n            }\n        }\n        return (\n            <div>\n                <Card className=\"SubgroupCard\">\n                    <Card.Header className=\"SubgroupCardHeader\" onClick = {()=>this.toggleShowCourses()}>{this.props.name}</Card.Header>\n                    <Collapse className=\"SubgroupCollapse\" in={this.state.showCourses}>\n                        <div>\n                            {compCourse.map((course, index)=> (\n                                <CompletedCourseButton \n                                planIndex={this.props.planIndex}\n                                Course={course}\n                                courseNumber={course['Course']}\n                                courseTitle={course['Title']}\n                                courseUnits={course['Units']} \n                                key = {course['Title']}\n                                handleClick = {() => this.setSelectedCourse(course)}\n                                isSelected = {this.state.selectedCourse === course}\n                                courseDescription = {course['Desc']}\n                                courseTerms = {course['Terms']}\n                                coursePres = {course['Pres']}\n                                overlapping = {this.props.overlapping(course, this.props.selectedPlan, this.props.requirementTitle, this.props.selectedCategory)}/>\n                                ))}\n                            {coursesCopy.map((course, index)=> (\n                                    <CourseButton\n                                        className = \"SubgroupCourse\"\n                                        Course={course}\n                                        courseNumber={course['Course']}\n                                        courseTitle={course['Title']}\n                                        courseUnits={course['Units']} \n                                        key = {course['Title']}\n                                        handleDrop={() => this.checkCompletedCourses()}\n                                        handleClick = {() => this.setSelectedCourse(course['Course'])}\n                                        isSelected = {this.state.selectedCourse === course['Course']}\n                                        courseDescription = {course['Desc']}\n                                        overlapping = {this.props.overlapping(course, this.props.selectedPlan, this.props.requirementTitle, this.props.selectedCategory)}/>\n                            ))}\n                        </div>\n                    </Collapse>\n                </Card>\n            </div>\n        )\n    }\n}\n\nexport default SubGroup;"]},"metadata":{},"sourceType":"module"}