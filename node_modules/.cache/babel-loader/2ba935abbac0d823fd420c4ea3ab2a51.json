{"ast":null,"code":"import * as React from 'react';\nimport invariant from 'invariant';\nimport hoistStatics from 'hoist-non-react-statics';\nimport { DndContext, createDndContext } from '../common/DndContext';\nimport { checkDecoratorArguments, isRefable } from './utils';\n/**\n * @deprecated Use DnDProvider in your JSX tree instead. This will be removed in a future major version.\n *\n * Wrap the root component of your application with DragDropContext decorator to set up React DnD.\n * This lets you specify the backend, and sets up the shared DnD state behind the scenes.\n * @param backendFactory The DnD backend factory\n * @param backendContext The backend context\n */\n\nexport function DragDropContext(backendFactory, backendContext, debugMode) {\n  checkDecoratorArguments('DragDropContext', 'backend', backendFactory);\n  const childContext = createDndContext(backendFactory, backendContext, debugMode);\n  return function decorateContext(DecoratedComponent) {\n    const Decorated = DecoratedComponent;\n    const displayName = Decorated.displayName || Decorated.name || 'Component';\n\n    class DragDropContextContainer extends React.Component {\n      constructor(props, context) {\n        super(props, context);\n        this.ref = React.createRef();\n\n        this.getManager = () => childContext.dragDropManager; // eslint-disable-next-line no-console\n\n\n        console.warn(\"DragDropContext has been deprecated and will be removed in a future version. Please use DndProvider instead.\");\n      }\n\n      getDecoratedComponentInstance() {\n        invariant(this.ref.current, 'In order to access an instance of the decorated component, it must either be a class component or use React.forwardRef()');\n        return this.ref.current;\n      }\n\n      render() {\n        return React.createElement(DndContext.Provider, {\n          value: childContext\n        }, React.createElement(Decorated, Object.assign({}, this.props, {\n          ref: isRefable(Decorated) ? this.ref : null\n        })));\n      }\n\n    }\n\n    DragDropContextContainer.DecoratedComponent = DecoratedComponent;\n    DragDropContextContainer.displayName = \"DragDropContext(\".concat(displayName, \")\");\n    return hoistStatics(DragDropContextContainer, DecoratedComponent);\n  };\n}","map":null,"metadata":{},"sourceType":"module"}