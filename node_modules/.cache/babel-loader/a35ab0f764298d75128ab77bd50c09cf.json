{"ast":null,"code":"import _slicedToArray from \"/Users/quinndarling/Desktop/beartracks-1.0/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useEffect, useRef, useMemo } from 'react';\nimport invariant from 'invariant';\nimport { useMonitorOutput } from './internal/useMonitorOutput';\nimport { useDropHandler, useDropTargetMonitor } from './internal/drop';\n/**\n * useDropTarget Hook\n * @param spec The drop target specification\n */\n\nexport function useDrop(spec) {\n  const specRef = useRef(spec);\n  specRef.current = spec;\n  invariant(spec.accept != null, 'accept must be defined');\n\n  const _useDropTargetMonitor = useDropTargetMonitor(),\n        _useDropTargetMonitor2 = _slicedToArray(_useDropTargetMonitor, 2),\n        monitor = _useDropTargetMonitor2[0],\n        connector = _useDropTargetMonitor2[1];\n\n  useDropHandler(specRef, monitor, connector);\n  const result = useMonitorOutput(monitor, specRef.current.collect || (() => ({})), () => connector.reconnect());\n  const connectDropTarget = useMemo(() => connector.hooks.dropTarget(), [connector]);\n  useEffect(() => {\n    connector.dropTargetOptions = spec.options || null;\n    connector.reconnect();\n  }, [spec.options]);\n  return [result, connectDropTarget];\n}","map":null,"metadata":{},"sourceType":"module"}