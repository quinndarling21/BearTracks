{"ast":null,"code":"var _jsxFileName = \"/Users/quinndarling/Desktop/BearTracks/src/Components/RequirementComponent/Requirement.js\";\nimport React, { Component } from 'react';\nimport CourseButton from '../CourseButtonComponent/CourseButton';\nimport { Card, Accordion, Form, Modal } from 'react-bootstrap';\nimport SubGroup from '../SubGroupComponent/SubGroup';\nimport DepartmentSubGroup from '../DepartmentSubGroup/DepartmentSubGroup';\nimport CompletedCourseButton from '../CompletedCourseButton/CompletedCourseButton';\nimport { FormGroup, FormControlLabel, Checkbox, Button, TextField, MenuItem } from '@material-ui/core';\nimport { plans, addAutocomplete, removeAutocomplete, addCustomCourse } from '../../UserPlans/User.js';\n\nfunction createName(courseList) {\n  const name = [courseList[0]['Course']];\n\n  for (let i = 1; i < courseList.length - 1; i++) {\n    name.push(', ' + courseList[i]['Course']);\n  }\n\n  name.push(' & ' + courseList[courseList.length - 1]['Course']);\n  return name.join('');\n}\n\nfunction isArray(value) {\n  return value && typeof value === 'object' && value.constructor === Array;\n}\n\nfunction getCoursesFromSemesters(semesters) {\n  var courseLists = [];\n\n  for (let i = 0; i < semesters.length; i++) {\n    courseLists.push(semesters[i][1]);\n  }\n\n  return [].concat.apply([], courseLists);\n}\n\nfunction checkAutoCompleted(category, requirement, planNum) {\n  for (let j = 0; j < plans[planNum]['autoCompleted'].length; j++) {\n    if (plans[planNum]['autoCompleted'][j][0] === category && plans[planNum]['autoCompleted'][j][1] === requirement) {\n      return plans[planNum]['autoCompleted'][j][2];\n    }\n  }\n\n  return 'false';\n}\n\nfunction getSum(total, num) {\n  return total + Math.round(num);\n}\n\nclass Requirement extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isClicked: this.props.isClicked,\n      coursesData: this.props.courseData,\n      selectedCourse: \"\",\n      shouldUpdate: this.props.shouldUpdate,\n      selectedPlan: this.props.selectedPlan,\n      rotation: true,\n      hovering: false,\n      showReqModal: false,\n      autoCompleted: checkAutoCompleted(this.props.selectedCategory, this.props.requirementTitle, this.props.selectedPlanNum),\n      customCourse: ['', '', '']\n    };\n    this.checkCompletedCourses = this.checkCompletedCourses.bind(this);\n    this.componentWillReceiveProps = this.componentWillReceiveProps.bind(this);\n    this.setSelectedCourse = this.setSelectedCourse.bind(this);\n    this.toggleHoverOn = this.toggleHoverOn.bind(this);\n    this.toggleHoverOff = this.toggleHoverOff.bind(this);\n    this.showReqModal = this.showReqModal.bind(this);\n    this.hideReqModal = this.hideReqModal.bind(this);\n    this.AutoComplete = this.AutoComplete.bind(this);\n    this.RemoveAutoComplete = this.RemoveAutoComplete.bind(this);\n    this.updateCustomCourseName = this.updateCustomCourseName.bind(this);\n    this.updateCustomCourseSemester = this.updateCustomCourseSemester.bind(this);\n    this.updateCustomCourseUnits = this.updateCustomCourseUnits.bind(this);\n    this.AutoCompleteWithCourse = this.AutoCompleteWithCourse.bind(this);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.setState({\n      semDates: nextProps.semDates,\n      isClicked: nextProps.isClicked,\n      shouldUpdate: nextProps.shouldUpdate,\n      selectedPlan: nextProps.selectedPlan,\n      autoCompleted: checkAutoCompleted(this.props.selectedCategory, this.props.requirementTitle, this.props.selectedPlanNum)\n    });\n  }\n\n  checkCompletedCourses() {\n    this.props.progress();\n    this.props.onUpdate();\n  }\n\n  setSelectedCourse(course) {\n    if (this.state.selectedCourse === course) {\n      this.setState({\n        selectedCourse: \"\"\n      });\n    } else {\n      this.setState({\n        selectedCourse: course\n      });\n    }\n\n    var curr = this.state.rotation;\n    this.setState({\n      rotation: !curr\n    });\n  }\n\n  overlapping(course, plan, reqTitle, catTitle) {\n    var categories = plan.collegeData.concat(plan.majorData, plan.minorData);\n    var catNames = plan.collegeNames.concat(plan.majorNames, plan.minorNames);\n    var reqs = [];\n\n    for (var i = 0; i < catNames.length; i++) {\n      var catReqs = categories[i][catNames[i]]['Requirements'];\n\n      for (var z = 0; z < catReqs.length; z++) {\n        var currReq = catReqs[z];\n        var courses = currReq['Course'];\n\n        if (courses[0] !== 'departmentsubgroup') {\n          let singleCourses = [];\n\n          for (let k = 0; k < courses.length; k++) {\n            if (!isArray(courses[k])) {\n              singleCourses.push(courses[k]);\n            } else {\n              for (let m = 0; m < courses[k].length; m++) singleCourses.push(courses[k][m]);\n            }\n          }\n\n          for (let x = 0; x < singleCourses.length; x++) {\n            if (singleCourses[x] === course) {\n              if (reqTitle !== currReq['Requirement'] || catTitle !== catNames[i]) {\n                reqs.push(catNames[i] + \" >> \" + currReq['Division'] + \" >> \" + currReq['Requirement']);\n                break;\n              }\n            }\n          }\n        } else {\n          var groups = courses[1];\n\n          for (let q = 0; q < groups.length; q++) {\n            for (let p = 0; p < groups[q][1].length; p++) {\n              if (groups[q][1][p] === course) {\n                if (reqTitle !== currReq['Requirement'] || catTitle !== catNames[i]) {\n                  reqs.push(catNames[i] + \" >> \" + currReq['Division'] + \" >> \" + currReq['Requirement']);\n                  break;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return reqs;\n  }\n\n  toggleHoverOn() {\n    this.setState({\n      hovering: true\n    });\n  }\n\n  toggleHoverOff() {\n    this.setState({\n      hovering: false\n    });\n  }\n\n  showReqModal() {\n    this.setState({\n      showReqModal: true\n    });\n  }\n\n  hideReqModal() {\n    this.setState({\n      showReqModal: false\n    });\n  }\n\n  AutoComplete() {\n    this.setState({\n      autoCompleted: 'checkbox'\n    });\n    addAutocomplete([this.props.selectedCategory, this.props.requirementTitle, 'checkbox', this.state.customCourse[0]], this.props.selectedPlanNum);\n    this.props.progress();\n    this.props.onUpdate();\n  }\n\n  AutoCompleteWithCourse() {\n    this.setState({\n      autoCompleted: 'course'\n    });\n    addAutocomplete([this.props.selectedCategory, this.props.requirementTitle, 'course', this.state.customCourse[0]], this.props.selectedPlanNum);\n  }\n\n  RemoveAutoComplete() {\n    this.setState({\n      autoCompleted: 'false'\n    });\n    removeAutocomplete([this.props.selectedCategory, this.props.requirementTitle], this.props.selectedPlanNum);\n    this.props.progress();\n    this.props.onUpdate();\n  }\n\n  generateSemesters() {\n    var semesters = [];\n\n    for (let i = 0; i < this.props.selectedPlan.semesters.length; i++) {\n      semesters.push({\n        value: this.props.selectedPlan.semesters[i][0]\n      });\n    }\n\n    return semesters;\n  }\n\n  updateCustomCourseName(event) {\n    var copy = this.state.customCourse;\n    copy[0] = event.target.value.toUpperCase();\n    this.setState({\n      customCourse: copy\n    });\n  }\n\n  updateCustomCourseUnits(event) {\n    var copy = this.state.customCourse;\n    copy[1] = event.target.value;\n    this.setState({\n      customCourse: copy\n    });\n  }\n\n  updateCustomCourseSemester(event) {\n    var copy = this.state.customCourse;\n    copy[2] = event.target.value;\n    this.setState({\n      customCourse: copy\n    });\n  }\n\n  addCustomCourse() {\n    if (this.state.customCourse[0] === '' || this.state.customCourse[1] === '' || this.state.customCourse[2] === '') {\n      this.hideReqModal();\n      return;\n    }\n\n    var course = {\n      'Course': {\n        'Course': this.state.customCourse[0],\n        'Units': this.state.customCourse[1],\n        'Title': 'Custom Course',\n        'Desc': \"This is a custom course created to satisfy the '\" + this.props.requirementTitle + \"' requirment.\"\n      }\n    };\n\n    for (let i = 0; i < this.props.selectedPlan.semesters.length; i++) {\n      if (this.state.customCourse[2] === this.props.selectedPlan.semesters[i][0]) {\n        this.hideReqModal();\n        addCustomCourse(course, i, this.props.selectedPlanNum);\n      }\n    }\n\n    this.AutoCompleteWithCourse();\n    this.props.renderSemesters();\n    this.props.progress();\n  }\n\n  render() {\n    var userCourses = getCoursesFromSemesters(this.state.selectedPlan.semesters);\n\n    if (this.state.coursesData[0] != 'departmentsubgroup') {\n      var Courses = [];\n      var groups = [];\n\n      for (let i = 0; i < this.state.coursesData.length; i++) {\n        if (!isArray(this.state.coursesData[i])) {\n          Courses.push(this.state.coursesData[i]);\n        } else {\n          groups.push(this.state.coursesData[i]);\n        }\n      }\n\n      var compCourse = [];\n      var compUnits = [0, 0];\n      var coursesCopy = Courses.slice();\n\n      for (let i = 0; i < Courses.length; i++) {\n        for (let j = 0; j < userCourses.length; j++) {\n          if (Courses[i]['Course'] === userCourses[j]['Course']['Course']) {\n            compCourse.push(Courses[i]);\n            compUnits.push(Courses[i]['Units']);\n            let correctInt;\n\n            for (let k = 0; k < coursesCopy.length; k++) {\n              if (coursesCopy[k]['Course'] === Courses[i]['Course']) {\n                correctInt = k;\n              }\n            }\n\n            coursesCopy.splice(correctInt, 1);\n          }\n        }\n      }\n\n      var compGroups = [];\n      var compGroupUnits = [0, 0];\n\n      for (let i = groups.length - 1; i >= 0; i--) {\n        var groupCourses = groups[i];\n        var checkCompleteGroup = [];\n\n        for (let j = groupCourses.length - 1; j >= 0; j--) {\n          let checkCompleteCourse = [];\n\n          for (let k = 0; k < userCourses.length; k++) {\n            if (userCourses[k]['Course']['Course'] === groupCourses[j]['Course']) {\n              checkCompleteCourse.push(1);\n            }\n          }\n\n          if (checkCompleteCourse.length > 0) {\n            checkCompleteGroup.push(1);\n          }\n        }\n\n        if (checkCompleteGroup.length === groupCourses.length) {\n          compGroups.push(groups[i]);\n\n          for (let j = 0; j < groups[i].length; j++) {\n            compGroupUnits.push(groups[i][j]['Units']);\n          }\n\n          groups.splice(i, 1);\n        }\n      }\n\n      console.log(compUnits);\n      compUnits = compUnits.reduce(getSum);\n      compGroupUnits = compGroupUnits.reduce(getSum);\n\n      if (compGroupUnits > compUnits) {\n        var compUnits = compGroupUnits;\n      }\n\n      var Rotate;\n\n      if (this.state.selectedCourse !== \"true\") {\n        Rotate = '270deg';\n      } else {\n        Rotate = '0deg';\n      }\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 328\n        },\n        __self: this\n      }, React.createElement(Card, {\n        className: \"requirement\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 329\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"RequirementHover\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 330\n        },\n        __self: this\n      }, React.createElement(Accordion.Toggle, {\n        className: \"RequirementHeader\",\n        as: Card.Header,\n        eventKey: this.props.index,\n        onClick: () => this.setSelectedCourse(''),\n        onMouseEnter: () => this.toggleHoverOn(),\n        onMouseLeave: () => this.toggleHoverOff(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 331\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"RequirementInfo\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 333\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        className: \"RequirementTitle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 334\n        },\n        __self: this\n      }, this.props.requirementTitle), !((compCourse.length + compGroups.length) / this.props.numClasses >= 1 || this.state.autoCompleted !== 'false') && React.createElement(\"h1\", {\n        className: \"RequirementProgress\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 336\n        },\n        __self: this\n      }, compCourse.length + compGroups.length, \"/\", this.props.numClasses), ((compCourse.length + compGroups.length) / this.props.numClasses >= 1 && compUnits >= this.props.numUnits || this.state.autoCompleted !== 'false') && React.createElement(\"img\", {\n        className: \"RequirementProgress\",\n        src: require(\"../../Images/CompletedRequirement.png\"),\n        height: \"30vw\",\n        width: \"30vw\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 338\n        },\n        __self: this\n      }), (compCourse.length + compGroups.length) / this.props.numClasses >= 1 && compUnits < this.props.numUnits && React.createElement(\"h1\", {\n        className: \"InsufficientUnits\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 340\n        },\n        __self: this\n      }, \"Insufficient Units (\", compUnits, \"/\", this.props.numUnits, \")\"), this.state.hovering && !((compCourse.length + compGroups.length) / this.props.numClasses >= 1 && compUnits > this.props.numUnits) && React.createElement(\"img\", {\n        className: \"RequirementOptionsButton\",\n        src: require(\"../../Images/vertEllipsisBlue.png\"),\n        onClick: () => this.showReqModal(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 342\n        },\n        __self: this\n      })))), compCourse.map((course, index) => React.createElement(Accordion.Collapse, {\n        key: this.state.selectedPlan + this.props.requirementTitle + index,\n        eventKey: this.props.index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 348\n        },\n        __self: this\n      }, React.createElement(CompletedCourseButton, {\n        planIndex: this.props.planIndex,\n        Course: course,\n        courseNumber: course['Course'],\n        courseTitle: course['Title'],\n        courseUnits: course['Units'],\n        key: course['Title'],\n        handleClick: () => this.setSelectedCourse(course),\n        isSelected: this.state.selectedCourse === course,\n        courseDescription: course['Desc'],\n        courseTerms: course['Terms'],\n        coursePres: course['Pres'],\n        overlapping: this.overlapping(course, this.state.selectedPlan, this.props.requirementTitle, this.props.selectedCategory),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 349\n        },\n        __self: this\n      }))), compGroups.map((group, index) => React.createElement(Accordion.Collapse, {\n        key: this.state.selectedPlan + createName(group) + index,\n        eventKey: this.props.index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 367\n        },\n        __self: this\n      }, React.createElement(Card.Body, {\n        className: \"CompletedCourseInfo\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 368\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 369\n        },\n        __self: this\n      }, createName(group))))), coursesCopy.map((course, index) => React.createElement(Accordion.Collapse, {\n        key: this.state.selectedPlan + course + index,\n        eventKey: this.props.index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 375\n        },\n        __self: this\n      }, React.createElement(CourseButton, {\n        planIndex: this.props.planIndex,\n        Course: course,\n        courseNumber: course['Course'],\n        courseTitle: course['Title'],\n        courseUnits: course['Units'],\n        key: course['Title'],\n        handleDrop: () => this.checkCompletedCourses(),\n        handleClick: () => this.setSelectedCourse(course),\n        isSelected: this.state.selectedCourse === course,\n        courseDescription: course['Desc'],\n        courseTerms: course['Terms'],\n        coursePres: course['Pres'],\n        overlapping: this.overlapping(course, this.state.selectedPlan, this.props.requirementTitle, this.props.selectedCategory),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 376\n        },\n        __self: this\n      }))), groups.map((group, index) => React.createElement(Accordion.Collapse, {\n        key: this.state.selectedPlan + group[0] + index,\n        eventKey: this.props.index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 393\n        },\n        __self: this\n      }, React.createElement(SubGroup, {\n        key: createName(group) + index,\n        planIndex: this.props.planIndex,\n        name: createName(group),\n        courses: group,\n        handleDrop: () => this.checkCompletedCourses(),\n        selectedPlan: this.state.selectedPlan,\n        shouldUpdate: this.props.shouldUpdate,\n        progress: () => this.props.progress(),\n        overlapping: this.overlapping,\n        requirementTitle: this.props.requirementTitle,\n        selectedCategory: this.props.selectedCategory,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 394\n        },\n        __self: this\n      })))), React.createElement(Modal, {\n        size: \"lg\",\n        show: this.state.showReqModal,\n        onHide: () => this.hideReqModal(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 410\n        },\n        __self: this\n      }, React.createElement(Modal.Header, {\n        closeButton: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 411\n        },\n        __self: this\n      }, React.createElement(Modal.Title, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 412\n        },\n        __self: this\n      }, this.props.requirementTitle + ' (' + this.props.numClasses + \" Course\" + (this.props.numClasses > 1 ? 's' : '') + ', ' + this.props.numUnits + ' Units)')), this.state.autoCompleted === 'false' && React.createElement(Modal.Body, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 418\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 419\n        },\n        __self: this\n      }, \"Some requirements can be fulfilled by courses taken outside of UC Berkeley.\"), React.createElement(FormGroup, {\n        row: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 420\n        },\n        __self: this\n      }, React.createElement(FormControlLabel, {\n        control: React.createElement(Checkbox, {\n          checked: this.state.autoCompleted === 'checkbox',\n          onChange: () => this.AutoComplete(),\n          value: \"checkedB\",\n          color: \"primary\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 423\n          },\n          __self: this\n        }),\n        label: \"Check this box to manually complete the requirement.\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 421\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 431\n        },\n        __self: this\n      }, \" ---or--- \"), React.createElement(FormGroup, {\n        row: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 432\n        },\n        __self: this\n      }, React.createElement(Form.Label, {\n        style: {\n          marginTop: '.75%'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 433\n        },\n        __self: this\n      }, \"Add a custom course to your planner that will satisfy the requirement.\")), React.createElement(FormGroup, {\n        row: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 435\n        },\n        __self: this\n      }, React.createElement(TextField, {\n        label: \"Course Name\",\n        margin: \"normal\",\n        variant: \"outlined\",\n        onChange: this.updateCustomCourseName,\n        value: this.state.customCourse[0],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 436\n        },\n        __self: this\n      }), React.createElement(TextField, {\n        select: true,\n        label: \"Units\",\n        margin: \"normal\",\n        variant: \"outlined\",\n        style: {\n          width: '100px',\n          marginLeft: '10px'\n        },\n        onChange: this.updateCustomCourseUnits,\n        value: this.state.customCourse[1],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 443\n        },\n        __self: this\n      }, [{\n        label: '1',\n        value: 1\n      }, {\n        label: '2',\n        value: 2\n      }, {\n        label: '3',\n        value: 3\n      }, {\n        label: '4',\n        value: 4\n      }, {\n        label: '5',\n        value: 5\n      }, {\n        label: '6',\n        value: 6\n      }].map(option => React.createElement(MenuItem, {\n        key: option.value,\n        value: option.value,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 453\n        },\n        __self: this\n      }, option.label))), React.createElement(TextField, {\n        select: true,\n        label: \"Semester\",\n        margin: \"normal\",\n        variant: \"outlined\",\n        style: {\n          width: '200px',\n          marginLeft: '10px'\n        },\n        onChange: this.updateCustomCourseSemester,\n        value: this.state.customCourse[2],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 458\n        },\n        __self: this\n      }, this.generateSemesters().map(semester => React.createElement(MenuItem, {\n        key: semester.value,\n        value: semester.value,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 467\n        },\n        __self: this\n      }, semester.value))), React.createElement(Button, {\n        onClick: () => this.addCustomCourse(),\n        color: \"primary\",\n        style: {\n          height: '40px',\n          marginTop: '25px',\n          marginLeft: '10px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 472\n        },\n        __self: this\n      }, \"Add Course\"))), this.state.autoCompleted === 'checkbox' && React.createElement(Modal.Body, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 478\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 479\n        },\n        __self: this\n      }, \"Some requirements can be fulfilled by courses taken outside of UC Berkeley.\"), React.createElement(FormGroup, {\n        row: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 480\n        },\n        __self: this\n      }, React.createElement(FormControlLabel, {\n        control: React.createElement(Checkbox, {\n          checked: this.state.autoCompleted === 'checkbox',\n          onChange: () => this.RemoveAutoComplete(),\n          value: \"checkedB\",\n          color: \"primary\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 483\n          },\n          __self: this\n        }),\n        label: \"Check this box to manually complete the requirement.\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 481\n        },\n        __self: this\n      }))), this.state.autoCompleted === 'course' && React.createElement(Modal.Body, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 493\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 494\n        },\n        __self: this\n      }, \"You are currently completing this requirement with a custom course.\"))));\n    } else {\n      var compCourse = [];\n      var groups = this.state.coursesData[1];\n\n      for (let i = 0; i < groups.length; i++) {\n        for (let j = 0; j < groups[i][1].length; j++) {\n          for (let k = 0; k < userCourses.length; k++) {\n            if (groups[i][1][j]['Course'] === userCourses[k]['Course']['Course']) {\n              compCourse.push(groups[i][1][j]);\n            }\n          }\n        }\n\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 513\n          },\n          __self: this\n        }, React.createElement(Card, {\n          className: \"requirement\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 514\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"RequirementHover\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 515\n          },\n          __self: this\n        }, React.createElement(Accordion.Toggle, {\n          className: \"RequirementHeader\",\n          as: Card.Header,\n          eventKey: this.props.index,\n          onClick: () => this.setSelectedCourse(''),\n          onMouseEnter: () => this.toggleHoverOn(),\n          onMouseLeave: () => this.toggleHoverOff(),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 516\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"RequirementInfo\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 518\n          },\n          __self: this\n        }, React.createElement(\"h1\", {\n          className: \"RequirementTitle\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 519\n          },\n          __self: this\n        }, this.props.requirementTitle), !(compCourse.length / this.props.numClasses >= 1 || this.state.autoCompleted !== 'false') && React.createElement(\"h1\", {\n          className: \"RequirementProgress\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 521\n          },\n          __self: this\n        }, compCourse.length, \"/\", this.props.numClasses), (compCourse.length / this.props.numClasses >= 1 || this.state.autoCompleted !== 'false') && React.createElement(\"img\", {\n          className: \"RequirementProgress\",\n          src: require(\"../../Images/CompletedRequirement.png\"),\n          height: \"30vw\",\n          width: \"30vw\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 523\n          },\n          __self: this\n        }), this.state.hovering && !(compCourse.length / this.props.numClasses >= 1) && React.createElement(\"img\", {\n          className: \"RequirementOptionsButton\",\n          src: require(\"../../Images/vertEllipsisBlue.png\"),\n          onClick: () => this.showReqModal(),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 525\n          },\n          __self: this\n        })))), compCourse.map((course, index) => React.createElement(Accordion.Collapse, {\n          key: this.state.selectedPlan + this.props.requirementTitle + index,\n          eventKey: this.props.index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 530\n          },\n          __self: this\n        }, React.createElement(CompletedCourseButton, {\n          planIndex: this.props.planIndex,\n          Course: course,\n          courseNumber: course['Course'],\n          courseTitle: course['Title'],\n          courseUnits: course['Units'],\n          key: course['Title'],\n          handleDrop: () => this.checkCompletedCourses(),\n          handleClick: () => this.setSelectedCourse(course),\n          isSelected: this.state.selectedCourse === course,\n          courseDescription: course['Desc'],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 531\n          },\n          __self: this\n        }))), groups.map((group, index) => React.createElement(Accordion.Collapse, {\n          key: this.state.selectedPlan + group[0] + index,\n          eventKey: this.props.index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 545\n          },\n          __self: this\n        }, React.createElement(DepartmentSubGroup, {\n          key: group[0] + index,\n          planIndex: this.props.planIndex,\n          name: group[0],\n          courses: group[1],\n          handleDrop: () => this.checkCompletedCourses(),\n          selectedPlan: this.state.selectedPlan,\n          shouldUpdate: this.props.shouldUpdate,\n          progress: () => this.props.progress(),\n          overlapping: this.overlapping,\n          requirementTitle: this.props.requirementTitle,\n          selectedCategory: this.props.selectedCategory,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 546\n          },\n          __self: this\n        })))), React.createElement(Modal, {\n          size: \"lg\",\n          show: this.state.showReqModal,\n          onHide: () => this.hideReqModal(),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 562\n          },\n          __self: this\n        }, React.createElement(Modal.Header, {\n          closeButton: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 563\n          },\n          __self: this\n        }, React.createElement(Modal.Title, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 564\n          },\n          __self: this\n        }, this.props.requirementTitle + ' (' + this.props.numClasses + \" Course\" + (this.props.numClasses > 1 ? 's' : '') + ', ' + this.props.numUnits + ' Units)')), this.state.autoCompleted === 'false' && React.createElement(Modal.Body, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 570\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 571\n          },\n          __self: this\n        }, \"Some requirements can be fulfilled by courses taken outside of UC Berkeley.\"), React.createElement(FormGroup, {\n          row: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 572\n          },\n          __self: this\n        }, React.createElement(FormControlLabel, {\n          control: React.createElement(Checkbox, {\n            checked: this.state.autoCompleted === 'checkbox',\n            onChange: () => this.AutoComplete(),\n            value: \"checkedB\",\n            color: \"primary\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 575\n            },\n            __self: this\n          }),\n          label: \"Check this box to manually complete the requirement.\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 573\n          },\n          __self: this\n        })), React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 583\n          },\n          __self: this\n        }, \" ---or--- \"), React.createElement(FormGroup, {\n          row: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 584\n          },\n          __self: this\n        }, React.createElement(Form.Label, {\n          style: {\n            marginTop: '.75%'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 585\n          },\n          __self: this\n        }, \"Add a custom course to your planner that will satisfy the requirement.\")), React.createElement(FormGroup, {\n          row: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 587\n          },\n          __self: this\n        }, React.createElement(TextField, {\n          label: \"Course Name\",\n          margin: \"normal\",\n          variant: \"outlined\",\n          onChange: this.updateCustomCourseName,\n          value: this.state.customCourse[0],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 588\n          },\n          __self: this\n        }), React.createElement(TextField, {\n          select: true,\n          label: \"Units\",\n          margin: \"normal\",\n          variant: \"outlined\",\n          style: {\n            width: '100px',\n            marginLeft: '10px'\n          },\n          onChange: this.updateCustomCourseUnits,\n          value: this.state.customCourse[1],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 595\n          },\n          __self: this\n        }, [{\n          label: '1',\n          value: 1\n        }, {\n          label: '2',\n          value: 2\n        }, {\n          label: '3',\n          value: 3\n        }, {\n          label: '4',\n          value: 4\n        }, {\n          label: '5',\n          value: 5\n        }, {\n          label: '6',\n          value: 6\n        }].map(option => React.createElement(MenuItem, {\n          key: option.value,\n          value: option.value,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 605\n          },\n          __self: this\n        }, option.label))), React.createElement(TextField, {\n          select: true,\n          label: \"Semester\",\n          margin: \"normal\",\n          variant: \"outlined\",\n          style: {\n            width: '200px',\n            marginLeft: '10px'\n          },\n          onChange: this.updateCustomCourseSemester,\n          value: this.state.customCourse[2],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 610\n          },\n          __self: this\n        }, this.generateSemesters().map(semester => React.createElement(MenuItem, {\n          key: semester.value,\n          value: semester.value,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 619\n          },\n          __self: this\n        }, semester.value))), React.createElement(Button, {\n          onClick: () => this.addCustomCourse(),\n          color: \"primary\",\n          style: {\n            height: '40px',\n            marginTop: '25px',\n            marginLeft: '10px'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 624\n          },\n          __self: this\n        }, \"Add Course\"))), this.state.autoCompleted === 'checkbox' && React.createElement(Modal.Body, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 630\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 631\n          },\n          __self: this\n        }, \"Some requirements can be fulfilled by courses taken outside of UC Berkeley.\"), React.createElement(FormGroup, {\n          row: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 632\n          },\n          __self: this\n        }, React.createElement(FormControlLabel, {\n          control: React.createElement(Checkbox, {\n            checked: this.state.autoCompleted === 'checkbox',\n            onChange: () => this.RemoveAutoComplete(),\n            value: \"checkedB\",\n            color: \"primary\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 635\n            },\n            __self: this\n          }),\n          label: \"Check this box to manually complete the requirement.\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 633\n          },\n          __self: this\n        }))), this.state.autoCompleted === 'course' && React.createElement(Modal.Body, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 645\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 646\n          },\n          __self: this\n        }, \"You are currently completing this requirement with a custom course.\"))));\n      }\n    }\n  }\n\n}\n\nexport default Requirement;","map":{"version":3,"sources":["/Users/quinndarling/Desktop/BearTracks/src/Components/RequirementComponent/Requirement.js"],"names":["React","Component","CourseButton","Card","Accordion","Form","Modal","SubGroup","DepartmentSubGroup","CompletedCourseButton","FormGroup","FormControlLabel","Checkbox","Button","TextField","MenuItem","plans","addAutocomplete","removeAutocomplete","addCustomCourse","createName","courseList","name","i","length","push","join","isArray","value","constructor","Array","getCoursesFromSemesters","semesters","courseLists","concat","apply","checkAutoCompleted","category","requirement","planNum","j","getSum","total","num","Math","round","Requirement","props","state","isClicked","coursesData","courseData","selectedCourse","shouldUpdate","selectedPlan","rotation","hovering","showReqModal","autoCompleted","selectedCategory","requirementTitle","selectedPlanNum","customCourse","checkCompletedCourses","bind","componentWillReceiveProps","setSelectedCourse","toggleHoverOn","toggleHoverOff","hideReqModal","AutoComplete","RemoveAutoComplete","updateCustomCourseName","updateCustomCourseSemester","updateCustomCourseUnits","AutoCompleteWithCourse","nextProps","setState","semDates","progress","onUpdate","course","curr","overlapping","plan","reqTitle","catTitle","categories","collegeData","majorData","minorData","catNames","collegeNames","majorNames","minorNames","reqs","catReqs","z","currReq","courses","singleCourses","k","m","x","groups","q","p","generateSemesters","event","copy","target","toUpperCase","renderSemesters","render","userCourses","Courses","compCourse","compUnits","coursesCopy","slice","correctInt","splice","compGroups","compGroupUnits","groupCourses","checkCompleteGroup","checkCompleteCourse","console","log","reduce","Rotate","Header","index","numClasses","numUnits","require","map","planIndex","group","marginTop","width","marginLeft","label","option","semester","height"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport CourseButton from '../CourseButtonComponent/CourseButton';\nimport { Card, Accordion, Form, Modal} from 'react-bootstrap';\nimport SubGroup from '../SubGroupComponent/SubGroup';\nimport DepartmentSubGroup from '../DepartmentSubGroup/DepartmentSubGroup'\nimport CompletedCourseButton from '../CompletedCourseButton/CompletedCourseButton';\nimport {FormGroup, FormControlLabel, Checkbox, Button, TextField, MenuItem} from '@material-ui/core';\nimport {plans, addAutocomplete, removeAutocomplete, addCustomCourse} from '../../UserPlans/User.js'\n\n\nfunction createName(courseList) {\n    const name = [courseList[0]['Course']];\n    for (let i = 1; i < courseList.length - 1; i++) {\n        name.push(', ' + courseList[i]['Course'])\n    }\n    name.push(' & ' + courseList[courseList.length - 1]['Course'])\n    return name.join('')\n}\n\nfunction isArray(value) {\n    return value && typeof value === 'object' && value.constructor === Array;\n}\n\nfunction getCoursesFromSemesters(semesters) {\n    var courseLists = [];\n    for (let i = 0; i < semesters.length; i++) {\n        courseLists.push(semesters[i][1])\n    }\n    return ([].concat.apply([], courseLists))\n}\n\nfunction checkAutoCompleted(category, requirement, planNum) {\n    for (let j = 0; j < plans[planNum]['autoCompleted'].length; j++ ) {\n        if (plans[planNum]['autoCompleted'][j][0]===category && plans[planNum]['autoCompleted'][j][1]===requirement){\n            return plans[planNum]['autoCompleted'][j][2]\n        }\n    } return 'false'\n}\n\nfunction getSum(total, num) {\n    return total + Math.round(num);\n}\n\nclass Requirement extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isClicked: this.props.isClicked,\n            coursesData: this.props.courseData,\n            selectedCourse: \"\",\n            shouldUpdate: this.props.shouldUpdate,\n            selectedPlan: this.props.selectedPlan,\n            rotation: true,\n            hovering: false,\n            showReqModal: false,\n            autoCompleted: checkAutoCompleted(this.props.selectedCategory, this.props.requirementTitle, this.props.selectedPlanNum),\n            customCourse:['', '', '']\n        };\n        this.checkCompletedCourses = this.checkCompletedCourses.bind(this);\n        this.componentWillReceiveProps = this.componentWillReceiveProps.bind(this);\n        this.setSelectedCourse = this.setSelectedCourse.bind(this);\n        this.toggleHoverOn = this.toggleHoverOn.bind(this);\n        this.toggleHoverOff = this.toggleHoverOff.bind(this);\n        this.showReqModal = this.showReqModal.bind(this);\n        this.hideReqModal = this.hideReqModal.bind(this);\n        this.AutoComplete = this.AutoComplete.bind(this);\n        this.RemoveAutoComplete = this.RemoveAutoComplete.bind(this);\n        this.updateCustomCourseName = this.updateCustomCourseName.bind(this);\n        this.updateCustomCourseSemester = this.updateCustomCourseSemester.bind(this);\n        this.updateCustomCourseUnits = this.updateCustomCourseUnits.bind(this);\n        this.AutoCompleteWithCourse = this.AutoCompleteWithCourse.bind(this);\n    } \n\n    componentWillReceiveProps(nextProps) {\n        this.setState({ \n            semDates: nextProps.semDates,\n            isClicked: nextProps.isClicked,\n            shouldUpdate: nextProps.shouldUpdate,\n            selectedPlan: nextProps.selectedPlan,\n            autoCompleted: checkAutoCompleted(this.props.selectedCategory, this.props.requirementTitle, this.props.selectedPlanNum)})  \n      }\n\n    checkCompletedCourses() {\n\n        this.props.progress();\n        this.props.onUpdate();\n\n    }\n\n    setSelectedCourse(course) {\n        if (this.state.selectedCourse === course) {\n        this.setState({\n            selectedCourse: \"\"\n        })}\n        else {\n            this.setState({\n                selectedCourse: course\n            })}\n        var curr = this.state.rotation\n        this.setState({rotation: !curr})\n    }\n\n    overlapping(course, plan, reqTitle, catTitle) {\n        var categories = plan.collegeData.concat(plan.majorData, plan.minorData);\n        var catNames = plan.collegeNames.concat(plan.majorNames, plan.minorNames); \n        var reqs = [];\n        for (var i = 0; i < catNames.length; i++) {\n            var catReqs = categories[i][catNames[i]]['Requirements']\n            for (var z = 0; z < catReqs.length; z++) {\n                var currReq = catReqs[z]\n                    var courses = currReq['Course'];\n                    if (courses[0] !== 'departmentsubgroup') {\n                        let singleCourses = [];\n\n                        for (let k = 0; k < courses.length; k++) {\n                            if (!isArray(courses[k])) {\n                                singleCourses.push(courses[k])\n                            } else {\n                                for (let m = 0; m < courses[k].length; m++)\n                                    singleCourses.push(courses[k][m])\n                            }\n                        }\n\n                        for (let x = 0; x < singleCourses.length; x++) {\n                            if (singleCourses[x] === course) {\n                                if (reqTitle !== currReq['Requirement'] || catTitle !== catNames[i]) {\n                                    reqs.push(catNames[i] + \" >> \" + currReq['Division'] + \" >> \" + currReq['Requirement'])\n                                    break;\n                                }\n                            }\n                        }\n                    } else {\n                        var groups = courses[1];\n                        for (let q = 0; q < groups.length; q++) {\n                            for (let p = 0; p < groups[q][1].length; p++) {\n                                if (groups[q][1][p] === course) {\n                                        if (reqTitle !== currReq['Requirement'] || catTitle !== catNames[i]) {\n                                        reqs.push(catNames[i] + \" >> \" + currReq['Division'] + \" >> \" + currReq['Requirement'])\n                                        break;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n        return reqs;\n    }\n\n    toggleHoverOn() {\n        this.setState({\n            hovering: true\n        })\n    }\n    toggleHoverOff() {\n        this.setState({\n            hovering: false\n        })\n    }\n\n    showReqModal() {\n        this.setState({\n            showReqModal: true\n                })\n    }\n\n    hideReqModal() {\n        this.setState({\n            showReqModal:false\n        })\n    } \n\n   AutoComplete() {\n        this.setState({\n            autoCompleted: 'checkbox'\n        })\n        addAutocomplete([this.props.selectedCategory, this.props.requirementTitle, 'checkbox', this.state.customCourse[0]], this.props.selectedPlanNum)\n        this.props.progress();\n        this.props.onUpdate();\n    }\n\n    AutoCompleteWithCourse() {\n        this.setState({\n            autoCompleted: 'course'\n        })\n        addAutocomplete([this.props.selectedCategory, this.props.requirementTitle, 'course', this.state.customCourse[0]], this.props.selectedPlanNum)\n    }\n\n    RemoveAutoComplete() {\n        this.setState({\n            autoCompleted: 'false'\n        })\n        removeAutocomplete([this.props.selectedCategory, this.props.requirementTitle], this.props.selectedPlanNum)\n        this.props.progress();\n        this.props.onUpdate();\n    }\n\n    generateSemesters() {\n        var semesters = []\n        for (let i = 0; i < this.props.selectedPlan.semesters.length; i++){\n            semesters.push({value:this.props.selectedPlan.semesters[i][0]})\n        }\n        return semesters\n    }\n\n    updateCustomCourseName(event) {\n        var copy = this.state.customCourse\n        copy[0] = event.target.value.toUpperCase()\n        this.setState({\n            customCourse: copy\n        })\n    }\n\n    updateCustomCourseUnits(event) {\n        var copy = this.state.customCourse\n        copy[1] = event.target.value\n        this.setState({\n            customCourse: copy\n        })\n    }\n\n    updateCustomCourseSemester(event) {\n        var copy = this.state.customCourse\n        copy[2] = event.target.value\n        this.setState({\n            customCourse: copy\n        })\n    }\n\n    addCustomCourse() {\n        if (this.state.customCourse[0] === '' || this.state.customCourse[1] === '' || this.state.customCourse[2] === '') {\n            this.hideReqModal()\n            return\n        }\n        var course = {'Course':{\n                        'Course': this.state.customCourse[0],\n                        'Units': this.state.customCourse[1],\n                        'Title': 'Custom Course',\n                        'Desc': \"This is a custom course created to satisfy the '\" + this.props.requirementTitle +\"' requirment.\"\n                        }}\n        for (let i = 0; i < this.props.selectedPlan.semesters.length; i++) {\n            if(this.state.customCourse[2]===this.props.selectedPlan.semesters[i][0]) {\n                this.hideReqModal()\n                addCustomCourse(course, i, this.props.selectedPlanNum)\n            }\n        }\n        this.AutoCompleteWithCourse()\n        this.props.renderSemesters()\n        this.props.progress()\n    }\n    \n    render() {\n        var userCourses = getCoursesFromSemesters(this.state.selectedPlan.semesters);\n\n        if (this.state.coursesData[0] != 'departmentsubgroup') {\n            var Courses = [];\n            var groups = [];\n\n        for (let i = 0; i < this.state.coursesData.length; i++) {\n            if (!isArray(this.state.coursesData[i])) {\n                Courses.push(this.state.coursesData[i])\n            } else {\n                groups.push(this.state.coursesData[i])\n            }\n        }\n\n        var compCourse = [];\n        var compUnits = [0,0];\n        var coursesCopy = Courses.slice();\n\n        for (let i = 0; i < Courses.length; i++) {\n            for (let j = 0; j < userCourses.length; j++) {\n                if(Courses[i]['Course'] === userCourses[j]['Course']['Course']) {\n                    compCourse.push(Courses[i])\n                    compUnits.push(Courses[i]['Units'])\n                    let correctInt;\n                    for (let k = 0; k < coursesCopy.length; k++) {\n                        if (coursesCopy[k]['Course'] === Courses[i]['Course']) {\n                            correctInt = k;\n                        }\n                    }\n                    coursesCopy.splice(correctInt,1);\n                }\n            }\n        }\n\n        var compGroups = [];\n        var compGroupUnits = [0,0];\n        for (let i = groups.length -1; i >= 0; i--) {\n            var groupCourses = groups[i];\n            var checkCompleteGroup = [];\n            for (let j = groupCourses.length -1; j >= 0; j--) {\n                let checkCompleteCourse = [];\n                for (let k = 0; k < userCourses.length; k++) {\n                    if (userCourses[k]['Course']['Course'] === groupCourses[j]['Course']) {\n                        checkCompleteCourse.push(1)\n                    }\n                }\n                if (checkCompleteCourse.length > 0) {\n                    checkCompleteGroup.push(1);\n                }\n            }\n            if (checkCompleteGroup.length === groupCourses.length) {\n                compGroups.push(groups[i])\n                for (let j = 0; j < groups[i].length; j++) {\n                    compGroupUnits.push(groups[i][j]['Units'])\n                }\n                groups.splice(i, 1)\n                }\n            }\n        console.log(compUnits)\n        compUnits = compUnits.reduce(getSum)\n        compGroupUnits = compGroupUnits.reduce(getSum)\n        if (compGroupUnits > compUnits) {\n            var compUnits = compGroupUnits\n        }\n        \n\n            var Rotate;\n            if (this.state.selectedCourse !== \"true\") {\n                Rotate = '270deg';\n            }\n            else {\n                Rotate = '0deg';\n            }\n            return (\n                <div>\n                    <Card className = 'requirement'> \n                        <div className =\"RequirementHover\">\n                            <Accordion.Toggle className='RequirementHeader' as={Card.Header} eventKey={this.props.index} onClick = {()=>this.setSelectedCourse('')}\n                            onMouseEnter = {() => this.toggleHoverOn()} onMouseLeave = {() => this.toggleHoverOff()}>\n                                <div className = 'RequirementInfo'>\n                                    <h1 className = 'RequirementTitle'>{this.props.requirementTitle}</h1>\n                                    {!((compCourse.length + compGroups.length)/this.props.numClasses >= 1|| this.state.autoCompleted !== 'false') &&\n                                    <h1 className = 'RequirementProgress'>{compCourse.length + compGroups.length}/{this.props.numClasses}</h1>}\n                                    {(((compCourse.length + compGroups.length)/this.props.numClasses >= 1 && compUnits >= this.props.numUnits)|| this.state.autoCompleted !== 'false')&&\n                                    <img className = 'RequirementProgress' src={require(\"../../Images/CompletedRequirement.png\")} height = '30vw' width = '30vw'/>}\n                                    {((compCourse.length + compGroups.length)/this.props.numClasses >= 1 && compUnits < this.props.numUnits) &&\n                                    <h1 className = 'InsufficientUnits'>Insufficient Units ({compUnits}/{this.props.numUnits})</h1>}\n                                    {this.state.hovering && !((compCourse.length + compGroups.length)/this.props.numClasses >= 1 && compUnits > this.props.numUnits) &&\n                                    <img className = 'RequirementOptionsButton' src={require(\"../../Images/vertEllipsisBlue.png\")} onClick = {()=>this.showReqModal()}/>}\n                                </div>\n                            </Accordion.Toggle>\n                        </div>\n                        \n                        {compCourse.map((course, index)=> (\n                            <Accordion.Collapse key = {this.state.selectedPlan + this.props.requirementTitle + index} eventKey={this.props.index}>\n                                <CompletedCourseButton \n                                    planIndex={this.props.planIndex}\n                                    Course={course}\n                                    courseNumber={course['Course']}\n                                    courseTitle={course['Title']}\n                                    courseUnits={course['Units']} \n                                    key = {course['Title']}\n                                    handleClick = {() => this.setSelectedCourse(course)}\n                                    isSelected = {this.state.selectedCourse === course}\n                                    courseDescription = {course['Desc']}\n                                    courseTerms = {course['Terms']}\n                                    coursePres = {course['Pres']}\n                                    overlapping = {this.overlapping(course, this.state.selectedPlan, this.props.requirementTitle, this.props.selectedCategory)}\n                                    />\n                            </Accordion.Collapse>\n                        ))}\n    \n                        {compGroups.map((group, index)=> (\n                            <Accordion.Collapse key = {this.state.selectedPlan + createName(group) + index} eventKey={this.props.index}>\n                                <Card.Body className = 'CompletedCourseInfo'>\n                                    <h1>{createName(group)}</h1>\n                                </Card.Body>\n                            </Accordion.Collapse>\n                        ))}\n    \n                        {coursesCopy.map((course, index)=> (\n                        <Accordion.Collapse key = {this.state.selectedPlan + course + index} eventKey={this.props.index}>\n                            <CourseButton\n                                planIndex={this.props.planIndex}\n                                Course={course}\n                                courseNumber={course['Course']}\n                                courseTitle={course['Title']}\n                                courseUnits={course['Units']} \n                                key = {course['Title']}\n                                handleDrop={() => this.checkCompletedCourses()}\n                                handleClick = {() => this.setSelectedCourse(course)}\n                                isSelected = {this.state.selectedCourse === course}\n                                courseDescription = {course['Desc']}\n                                courseTerms = {course['Terms']}\n                                coursePres = {course['Pres']}\n                                overlapping = {this.overlapping(course, this.state.selectedPlan, this.props.requirementTitle, this.props.selectedCategory)}/>\n                        </Accordion.Collapse>\n                            ))}\n                        {groups.map((group, index) => (\n                            <Accordion.Collapse key = {this.state.selectedPlan + group[0] + index} eventKey={this.props.index}>\n                                <SubGroup\n                                    key = {createName(group) + index}\n                                    planIndex = {this.props.planIndex}\n                                    name = {createName(group)}\n                                    courses = {group}\n                                    handleDrop={() => this.checkCompletedCourses()}\n                                    selectedPlan = {this.state.selectedPlan}\n                                    shouldUpdate = {this.props.shouldUpdate}\n                                    progress = {(() => this.props.progress())}\n                                    overlapping = {this.overlapping}\n                                    requirementTitle = {this.props.requirementTitle}\n                                    selectedCategory = {this.props.selectedCategory}\n                                    />\n                            </Accordion.Collapse>\n                        ))}\n                    </Card>\n                    <Modal size=\"lg\" show = {this.state.showReqModal} onHide = {()=>this.hideReqModal()}>\n                            <Modal.Header closeButton>\n                                <Modal.Title>\n                                    {this.props.requirementTitle+' ('+this.props.numClasses+ \" Course\" + ((this.props.numClasses > 1)? 's':'') +', ' +this.props.numUnits+' Units)'}\n                                </Modal.Title>\n                                \n                            </Modal.Header>\n                            {this.state.autoCompleted === 'false' && \n                            <Modal.Body>\n                                <div>Some requirements can be fulfilled by courses taken outside of UC Berkeley.</div>\n                                <FormGroup row>\n                                    <FormControlLabel\n                                        control={\n                                        <Checkbox\n                                            checked={this.state.autoCompleted === 'checkbox'}\n                                            onChange={()=>this.AutoComplete() }\n                                            value=\"checkedB\"\n                                            color=\"primary\"\n                                        />}\n                                        label={\"Check this box to manually complete the requirement.\"}\n                                /></FormGroup>\n                                <div> ---or--- </div>\n                                <FormGroup row>\n                                    <Form.Label style = {{marginTop: '.75%'}}>Add a custom course to your planner that will satisfy the requirement.</Form.Label>\n                                </FormGroup>\n                                <FormGroup row>\n                                    <TextField\n                                        label=\"Course Name\"\n                                        margin=\"normal\"\n                                        variant=\"outlined\"\n                                        onChange={this.updateCustomCourseName}\n                                        value = {this.state.customCourse[0]}\n                                    />\n                                    <TextField\n                                        select\n                                        label=\"Units\"\n                                        margin=\"normal\"\n                                        variant = 'outlined'\n                                        style = {{width: '100px', marginLeft: '10px'}}\n                                        onChange={this.updateCustomCourseUnits}\n                                        value = {this.state.customCourse[1]}\n                                    >\n                                        {[{label : '1', value : 1},{label : '2', value : 2},{label : '3', value : 3},{label : '4', value : 4},{label : '5', value : 5},{label : '6', value : 6}].map(option => (\n                                        <MenuItem key={option.value} value={option.value}>\n                                            {option.label}\n                                        </MenuItem>\n                                        ))}\n                                    </TextField>\n                                    <TextField\n                                        select\n                                        label=\"Semester\"\n                                        margin=\"normal\"\n                                        variant = 'outlined'\n                                        style = {{width: '200px', marginLeft: '10px'}}\n                                        onChange={this.updateCustomCourseSemester}\n                                        value = {this.state.customCourse[2]}>\n                                        {this.generateSemesters().map(semester => (\n                                        <MenuItem key={semester.value} value={semester.value}>\n                                            {semester.value}\n                                        </MenuItem>\n                                        ))}\n                                    </TextField>\n                                    <Button onClick = {()=>this.addCustomCourse()} color=\"primary\" style = {{height: '40px', marginTop: '25px', marginLeft: '10px'}}>\n                                        Add Course\n                                    </Button>\n                                </FormGroup>\n                            </Modal.Body>}\n                            {this.state.autoCompleted === 'checkbox' &&\n                            <Modal.Body>\n                                <div>Some requirements can be fulfilled by courses taken outside of UC Berkeley.</div>\n                                <FormGroup row>\n                                    <FormControlLabel\n                                        control={\n                                        <Checkbox\n                                            checked={this.state.autoCompleted === 'checkbox'}\n                                            onChange={()=>this.RemoveAutoComplete()}\n                                            value=\"checkedB\"\n                                            color=\"primary\"\n                                        />}\n                                        label={\"Check this box to manually complete the requirement.\"}\n                                /></FormGroup>\n                            </Modal.Body>}\n                            {this.state.autoCompleted === 'course' &&\n                            <Modal.Body>\n                                <div>You are currently completing this requirement with a custom course.</div>\n                            </Modal.Body>}\n                    </Modal>\n                </div>\n            )\n        } else {\n            var compCourse = [];\n            var groups = this.state.coursesData[1];\n            for (let i = 0; i < groups.length; i++) {\n                for (let j = 0; j < groups[i][1].length; j++) {\n                    for (let k = 0; k < userCourses.length; k++) {\n                        if (groups[i][1][j]['Course'] === userCourses[k]['Course']['Course']) {\n                            compCourse.push(groups[i][1][j])\n                        }\n                    }\n                }\n            \n\n            return(\n                <div>\n                    <Card className = 'requirement'>\n                    <div className =\"RequirementHover\">\n                            <Accordion.Toggle className='RequirementHeader' as={Card.Header} eventKey={this.props.index} onClick = {()=>this.setSelectedCourse('')} onMouseEnter = {() => this.toggleHoverOn()} \n                            onMouseLeave = {() => this.toggleHoverOff()}>\n                                <div className = 'RequirementInfo'>\n                                    <h1 className = 'RequirementTitle'>{this.props.requirementTitle}</h1>\n                                    {!(compCourse.length/this.props.numClasses >= 1|| this.state.autoCompleted !== 'false') &&\n                                    <h1 className = 'RequirementProgress'>{compCourse.length}/{this.props.numClasses}</h1>}\n                                    {(compCourse.length/this.props.numClasses >= 1|| this.state.autoCompleted !== 'false')&&\n                                    <img className = 'RequirementProgress' src={require(\"../../Images/CompletedRequirement.png\")} height = '30vw' width = '30vw'/>}\n                                    {this.state.hovering && !(compCourse.length/this.props.numClasses >= 1) &&\n                                    <img className = 'RequirementOptionsButton' src={require(\"../../Images/vertEllipsisBlue.png\")} onClick = {()=>this.showReqModal()}/>}\n                                </div>\n                            </Accordion.Toggle>\n                        </div>\n                        {compCourse.map((course, index)=> (\n                        <Accordion.Collapse key = {this.state.selectedPlan + this.props.requirementTitle + index} eventKey={this.props.index}>\n                            <CompletedCourseButton \n                                planIndex={this.props.planIndex}\n                                Course={course}\n                                courseNumber={course['Course']}\n                                courseTitle={course['Title']}\n                                courseUnits={course['Units']} \n                                key = {course['Title']}\n                                handleDrop={() => this.checkCompletedCourses()}\n                                handleClick = {() => this.setSelectedCourse(course)}\n                                isSelected = {this.state.selectedCourse === course}\n                                courseDescription = {course['Desc']}/>\n                        </Accordion.Collapse>\n                        ))}\n                        {groups.map((group, index) => (\n                        <Accordion.Collapse key = {this.state.selectedPlan + group[0] + index} eventKey={this.props.index}>\n                            <DepartmentSubGroup\n                                key = {group[0] + index}\n                                planIndex = {this.props.planIndex}\n                                name = {group[0]}\n                                courses = {group[1]}\n                                handleDrop={() => this.checkCompletedCourses()}\n                                selectedPlan = {this.state.selectedPlan}\n                                shouldUpdate = {this.props.shouldUpdate}\n                                progress = {(() => this.props.progress())}\n                                overlapping = {this.overlapping}\n                                requirementTitle = {this.props.requirementTitle}\n                                selectedCategory = {this.props.selectedCategory}\n                                />\n                        </Accordion.Collapse>\n                        ))}\n                    </Card>\n                    <Modal size=\"lg\" show = {this.state.showReqModal} onHide = {()=>this.hideReqModal()}>\n                            <Modal.Header closeButton>\n                                <Modal.Title>\n                                    {this.props.requirementTitle+' ('+this.props.numClasses+ \" Course\" + ((this.props.numClasses > 1)? 's':'') +', ' +this.props.numUnits+' Units)'}\n                                </Modal.Title>\n                                \n                            </Modal.Header>\n                            {this.state.autoCompleted === 'false' && \n                            <Modal.Body>\n                                <div>Some requirements can be fulfilled by courses taken outside of UC Berkeley.</div>\n                                <FormGroup row>\n                                    <FormControlLabel\n                                        control={\n                                        <Checkbox\n                                            checked={this.state.autoCompleted === 'checkbox'}\n                                            onChange={()=>this.AutoComplete() }\n                                            value=\"checkedB\"\n                                            color=\"primary\"\n                                        />}\n                                        label={\"Check this box to manually complete the requirement.\"}\n                                /></FormGroup>\n                                <div> ---or--- </div>\n                                <FormGroup row>\n                                    <Form.Label style = {{marginTop: '.75%'}}>Add a custom course to your planner that will satisfy the requirement.</Form.Label>\n                                </FormGroup>\n                                <FormGroup row>\n                                    <TextField\n                                        label=\"Course Name\"\n                                        margin=\"normal\"\n                                        variant=\"outlined\"\n                                        onChange={this.updateCustomCourseName}\n                                        value = {this.state.customCourse[0]}\n                                    />\n                                    <TextField\n                                        select\n                                        label=\"Units\"\n                                        margin=\"normal\"\n                                        variant = 'outlined'\n                                        style = {{width: '100px', marginLeft: '10px'}}\n                                        onChange={this.updateCustomCourseUnits}\n                                        value = {this.state.customCourse[1]}\n                                    >\n                                        {[{label : '1', value : 1},{label : '2', value : 2},{label : '3', value : 3},{label : '4', value : 4},{label : '5', value : 5},{label : '6', value : 6}].map(option => (\n                                        <MenuItem key={option.value} value={option.value}>\n                                            {option.label}\n                                        </MenuItem>\n                                        ))}\n                                    </TextField>\n                                    <TextField\n                                        select\n                                        label=\"Semester\"\n                                        margin=\"normal\"\n                                        variant = 'outlined'\n                                        style = {{width: '200px', marginLeft: '10px'}}\n                                        onChange={this.updateCustomCourseSemester}\n                                        value = {this.state.customCourse[2]}>\n                                        {this.generateSemesters().map(semester => (\n                                        <MenuItem key={semester.value} value={semester.value}>\n                                            {semester.value}\n                                        </MenuItem>\n                                        ))}\n                                    </TextField>\n                                    <Button onClick = {()=>this.addCustomCourse()} color=\"primary\" style = {{height: '40px', marginTop: '25px', marginLeft: '10px'}}>\n                                        Add Course\n                                    </Button>\n                                </FormGroup>\n                            </Modal.Body>}\n                            {this.state.autoCompleted === 'checkbox' &&\n                            <Modal.Body>\n                                <div>Some requirements can be fulfilled by courses taken outside of UC Berkeley.</div>\n                                <FormGroup row>\n                                    <FormControlLabel\n                                        control={\n                                        <Checkbox\n                                            checked={this.state.autoCompleted === 'checkbox'}\n                                            onChange={()=>this.RemoveAutoComplete()}\n                                            value=\"checkedB\"\n                                            color=\"primary\"\n                                        />}\n                                        label={\"Check this box to manually complete the requirement.\"}\n                                /></FormGroup>\n                            </Modal.Body>}\n                            {this.state.autoCompleted === 'course' &&\n                            <Modal.Body>\n                                <div>You are currently completing this requirement with a custom course.</div>\n                            </Modal.Body>}\n                    </Modal>\n                </div>\n            )\n        }\n    } }\n}\n\n    export default Requirement;"]},"metadata":{},"sourceType":"module"}