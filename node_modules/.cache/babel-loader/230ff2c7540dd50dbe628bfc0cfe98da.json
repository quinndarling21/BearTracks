{"ast":null,"code":"import catalog from '../CATALOG';\nimport { bool } from 'prop-types';\nimport courses from '../courses.json';\nexport var plans = [];\nvar completedCourses = [];\nconst initialEnrollments = {\n  'Colleges': {\n    'College of Letters and Sciences': {\n      'Majors': ['Data Science'],\n      'Minors': ['Mathematics']\n    }\n  }\n};\nmakePlan('Fall 2017', 'Spring 2021', initialEnrollments, 'Current Track');\nexport function makePlan(startSem, endSem, enrollments, name) {\n  const plan = {\n    'semesters': null,\n    'collegeNames': null,\n    'majorNames': null,\n    'minorNames': null,\n    'majorData': null,\n    'minorData': null,\n    'collegeData': null,\n    'totalProgress': null,\n    'dates': null,\n    'name': name,\n    'autoCompleted': null\n  };\n  plan.collegeNames = Object.keys(enrollments['Colleges']);\n  plan.majorNames = findMajorNames(enrollments);\n  plan.minorNames = findMinorNames(enrollments);\n  plan.majorData = findMajorData(enrollments);\n  plan.minorData = findMinorData(enrollments);\n  plan.collegeData = findCollegeData(enrollments);\n  plan.autoCompleted = [];\n  plan.semesters = generateDates(startSem, endSem); // plan.semesters = Array(generateLength(startSem, endSem)).fill([]);\n\n  var totalProg = function () {\n    var categories = plan.collegeData.concat(plan.majorData, plan.minorData);\n    var catNames = plan.collegeNames.concat(plan.majorNames, plan.minorNames);\n    var numUnits = 0;\n    var numCompletedUnits = 0;\n\n    for (var i = 0; i < catNames.length; i++) {\n      var currReq = categories[i][catNames[i]]['Requirements'];\n\n      for (var j = 0; j < currReq.length; j++) {\n        var completed = [];\n\n        for (let k = 0; k < plan.autoCompleted.length; k++) {\n          if (plan.autoCompleted[k][0] === catNames[i] && plan.autoCompleted[k][1] === currReq[j]['Requirement']) {\n            completed.push('true');\n          }\n        }\n\n        if (completed.length === 0) {\n          var numCompletedUnits = numCompletedUnits + findUnitsTakeninRequirement(plan.semesters, currReq[j]);\n        } else {\n          var numCompletedUnits = numCompletedUnits + currReq[j]['Minimum Units'];\n        }\n\n        numUnits += currReq[j]['Minimum Units'];\n      }\n    }\n\n    return Math.floor(numCompletedUnits / numUnits * 100);\n  };\n\n  plan['totalProgress'] = totalProg;\n  plans.push(plan);\n}\nexport function setCompletedCourses(list) {\n  completedCourses = list;\n}\nexport function deletePlan(i) {\n  plans.splice(i, 1);\n}\nexport function editDegrees(enrollments, i) {\n  plans[i].collegeNames = Object.keys(enrollments['Colleges']);\n  plans[i].majorNames = findMajorNames(enrollments);\n  plans[i].minorNames = findMinorNames(enrollments);\n  plans[i].majorData = findMajorData(enrollments);\n  plans[i].minorData = findMinorData(enrollments);\n  plans[i].collegeData = findCollegeData(enrollments);\n}\nexport function addAutocomplete(reqPath, i) {\n  plans[i]['autoCompleted'].push(reqPath);\n}\nexport function removeAutocomplete(reqPath, i) {\n  plans[i].autoCompleted.splice(plans[i].autoCompleted.indexOf(reqPath), 1);\n}\nexport function addCustomCourse(course, sem, plan) {\n  plans[plan]['semesters'][sem][1].push(course);\n}\nexport function removeCustomCourse(course, plan) {\n  debugger;\n\n  for (let i = 0; i < plans[plan]['autoCompleted'].length; i++) {\n    if (plans[plan]['autoCompleted'][i][3] === course) {\n      plans[plan].autoCompleted.splice(i, 1);\n      return;\n    }\n  }\n}\n\nfunction findMajorData(enrollments) {\n  /* Goes through every college, finds the js/json files that contain information about every major in each college*/\n\n  /* return data in the form [{'Data Science': {\n                                  'Requirements': \n                                      [{\n                                      'Division': ...,\n                                      'Requirement': ...,\n                                      \"Number of Classes\": ...,\n                                      \"Minimum Units\": ...,\n                                      \"Course\": [courses[...], ...]\n                                      }]\n                                  }}]*/\n  var userMajors = [];\n  var collegeNames = Object.keys(enrollments['Colleges']);\n\n  for (let i = 0; i < collegeNames.length; i++) {\n    for (let j = 0; j < enrollments['Colleges'][collegeNames[i]]['Majors'].length; j++) {\n      let currMajor = enrollments['Colleges'][collegeNames[i]]['Majors'][j];\n      let catalogDict = catalog['Colleges'][collegeNames[i]]['Majors'][currMajor];\n      let dict = {\n        [currMajor]: catalogDict\n      };\n      userMajors.push(dict);\n    }\n  }\n\n  return userMajors;\n}\n\nfunction findMajorNames(enrollments) {\n  var userMajors = [];\n  var collegeNames = Object.keys(enrollments['Colleges']);\n\n  for (let i = 0; i < collegeNames.length; i++) {\n    for (let j = 0; j < enrollments['Colleges'][collegeNames[i]]['Majors'].length; j++) {\n      let currMajor = enrollments['Colleges'][collegeNames[i]]['Majors'][j];\n      userMajors.push(currMajor);\n    }\n  }\n\n  return userMajors;\n}\n\nfunction findCollegeData(enrollments) {\n  var userColleges = [];\n  var collegeNames = Object.keys(enrollments['Colleges']);\n\n  for (let i = 0; i < collegeNames.length; i++) {\n    let currCollege = collegeNames[i];\n    let catalogDict = catalog['Colleges'][currCollege]['College Requirements'];\n    let dict = {\n      [currCollege]: catalogDict\n    };\n    userColleges.push(dict);\n  }\n\n  return userColleges;\n}\n\nfunction findMinorData(enrollments) {\n  var userMinors = [];\n  var collegeNames = Object.keys(enrollments['Colleges']);\n\n  for (let i = 0; i < collegeNames.length; i++) {\n    for (let j = 0; j < enrollments['Colleges'][collegeNames[i]]['Minors'].length; j++) {\n      let currMinor = enrollments['Colleges'][collegeNames[i]]['Minors'][j];\n      let catalogDict = catalog['Colleges'][collegeNames[i]]['Minors'][currMinor];\n      let dict = {\n        [currMinor]: catalogDict\n      };\n      userMinors.push(dict);\n    }\n  }\n\n  return userMinors;\n}\n\nfunction findMinorNames(enrollments) {\n  var userMinors = [];\n  var collegeNames = Object.keys(enrollments['Colleges']);\n\n  for (let i = 0; i < collegeNames.length; i++) {\n    for (let j = 0; j < enrollments['Colleges'][collegeNames[i]]['Minors'].length; j++) {\n      let currMinor = enrollments['Colleges'][collegeNames[i]]['Minors'][j];\n      userMinors.push(currMinor);\n    }\n  }\n\n  return userMinors;\n}\n\nfunction findUnitsTakeninRequirement(semesters, requirement) {\n  let userCourses = getCoursesFromSemesters(semesters);\n  let unitsTaken = 0;\n  var courses = requirement['Course'];\n\n  if (courses[0] !== 'departmentsubgroup') {\n    let singleCourses = [];\n    let groups = [];\n\n    for (let i = 0; i < courses.length; i++) {\n      if (!isArray(courses[i])) {\n        singleCourses.push(courses[i]);\n      } else {\n        groups.push(courses[i]);\n      }\n    }\n\n    for (let i = 0; i < singleCourses.length; i++) {\n      for (let j = 0; j < userCourses.length; j++) {\n        if (singleCourses[i]['Course'] === userCourses[j]['Course']['Course']) {\n          unitsTaken += singleCourses[i]['Units'];\n        }\n      }\n    }\n\n    let groupUnits = [];\n\n    for (let i = 0; i < groups.length; i++) {\n      let curGroupUnits = [0, 0];\n\n      for (let j = 0; j < groups[i].length; j++) {\n        for (let k = 0; k < userCourses.length; k++) {\n          if (userCourses[k]['Course']['Course'] === groups[i][j]['Course']) {\n            curGroupUnits.push(groups[i][j]['Units']);\n          }\n        }\n      }\n\n      let total = curGroupUnits.reduce(getSum);\n      groupUnits.push(total);\n    }\n\n    let maxGroupUnits = [0];\n\n    for (let i = 0; i < groupUnits.length; i++) {\n      if (groupUnits[i] > maxGroupUnits[maxGroupUnits.length - 1]) {\n        maxGroupUnits.push(groupUnits[i]);\n      }\n    }\n\n    if (maxGroupUnits[maxGroupUnits.length - 1] > unitsTaken) {\n      unitsTaken = maxGroupUnits[maxGroupUnits.length - 1];\n    }\n\n    if (unitsTaken > requirement['Minimum Units']) {\n      return requirement['Minimum Units'];\n    } else {\n      return unitsTaken;\n    }\n  } else {\n    var groups = courses[1];\n\n    for (let i = 0; i < groups.length; i++) {\n      for (let j = 0; j < groups[i][1].length; j++) {\n        for (let k = 0; k < userCourses.length; k++) {\n          if (groups[i][1][j]['Course'] === userCourses[k]['Course']['Course']) {\n            unitsTaken = +groups[i][1][j]['Units'];\n          }\n        }\n      }\n    }\n\n    if (unitsTaken > requirement['Minimum Units']) {\n      return requirement['Minimum Units'];\n    } else {\n      return unitsTaken;\n    }\n  }\n}\n\nfunction generateLength(start, end) {\n  let listDates = [start];\n  const splitStart = start.split(\" \");\n  let currSeason = splitStart[0];\n  let currYear = parseInt(splitStart[1], 10);\n  const splitEnd = end.split(\" \");\n  const endSeason = splitEnd[0];\n  const endYear = parseInt(splitEnd[1], 10);\n  var i = 0;\n\n  while (i < 20) {\n    if (currSeason === endSeason && currYear === endYear) {\n      break;\n    }\n\n    if (currSeason === 'Spring') {\n      currSeason = 'Fall';\n    } else {\n      currSeason = 'Spring';\n      currYear++;\n    }\n\n    listDates.push(currSeason + ' ' + currYear.toString());\n    i++;\n  }\n\n  return listDates.length;\n}\n\nfunction getSum(total, num) {\n  return total + Math.round(num);\n}\n\nfunction generateDates(start, end) {\n  let listDates = [[start, []]];\n  const splitStart = start.split(\" \");\n  let currSeason = splitStart[0];\n  let currYear = parseInt(splitStart[1], 10);\n  const splitEnd = end.split(\" \");\n  const endSeason = splitEnd[0];\n  const endYear = parseInt(splitEnd[1], 10);\n  var i = 0;\n\n  while (i < 20) {\n    if (currSeason === endSeason && currYear === endYear) {\n      break;\n    }\n\n    if (currSeason === 'Spring') {\n      currSeason = 'Fall';\n    } else {\n      currSeason = 'Spring';\n      currYear++;\n    }\n\n    var semester = currSeason + ' ' + currYear.toString();\n    var compCourseList = [];\n\n    for (let j = 0; j < completedCourses.length; j++) {\n      if (completedCourses[j][0] === semester) {\n        for (let k = 0; k < completedCourses[j][1].length; k++) {\n          compCourseList.push(courses[completedCourses[j][1][k]]);\n        }\n      }\n    }\n\n    listDates.push([semester, compCourseList]);\n    i++;\n  }\n\n  return listDates;\n}\n\nfunction isArray(value) {\n  return value && typeof value === 'object' && value.constructor === Array;\n}\n\nfunction getCoursesFromSemesters(semesters) {\n  var courseLists = [];\n\n  for (let i = 0; i < semesters.length; i++) {\n    courseLists.push(semesters[i][1]);\n  }\n\n  return [].concat.apply([], courseLists);\n}","map":{"version":3,"sources":["/Users/quinndarling/Desktop/beartracks-1.0/src/UserPlans/User.js"],"names":["catalog","bool","courses","plans","completedCourses","initialEnrollments","makePlan","startSem","endSem","enrollments","name","plan","collegeNames","Object","keys","majorNames","findMajorNames","minorNames","findMinorNames","majorData","findMajorData","minorData","findMinorData","collegeData","findCollegeData","autoCompleted","semesters","generateDates","totalProg","categories","concat","catNames","numUnits","numCompletedUnits","i","length","currReq","j","completed","k","push","findUnitsTakeninRequirement","Math","floor","setCompletedCourses","list","deletePlan","splice","editDegrees","addAutocomplete","reqPath","removeAutocomplete","indexOf","addCustomCourse","course","sem","removeCustomCourse","userMajors","currMajor","catalogDict","dict","userColleges","currCollege","userMinors","currMinor","requirement","userCourses","getCoursesFromSemesters","unitsTaken","singleCourses","groups","isArray","groupUnits","curGroupUnits","total","reduce","getSum","maxGroupUnits","generateLength","start","end","listDates","splitStart","split","currSeason","currYear","parseInt","splitEnd","endSeason","endYear","toString","num","round","semester","compCourseList","value","constructor","Array","courseLists","apply"],"mappings":"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","sourcesContent":["import catalog from '../CATALOG'; \nimport { bool } from 'prop-types';\nimport courses from '../courses.json'\n\nexport var plans = [];\n\nvar completedCourses = [];\n\nconst initialEnrollments = {'Colleges': \n                                {\n                                'College of Letters and Sciences': \n                                    {\n                                    'Majors': ['Data Science'],\n                                    'Minors': ['Mathematics']\n                                    }}}\n\n\nmakePlan('Fall 2017', 'Spring 2021', initialEnrollments, 'Current Track');\n\nexport function makePlan(startSem, endSem, enrollments, name) {\n    const plan = {'semesters': null, 'collegeNames': null, 'majorNames': null, 'minorNames': null,\n                  'majorData': null, 'minorData': null, 'collegeData': null, 'totalProgress': null,'dates': null, 'name': name, 'autoCompleted': null};\n\n    plan.collegeNames = Object.keys(enrollments['Colleges'])\n    plan.majorNames = findMajorNames(enrollments); \n    plan.minorNames = findMinorNames(enrollments);\n\n    plan.majorData = findMajorData(enrollments);\n    plan.minorData = findMinorData(enrollments);\n    plan.collegeData = findCollegeData(enrollments);\n    plan.autoCompleted = [];\n\n    plan.semesters = generateDates(startSem, endSem)\n\n    // plan.semesters = Array(generateLength(startSem, endSem)).fill([]);\n    \n     var totalProg = function() {\n        var categories = plan.collegeData.concat(plan.majorData, plan.minorData);\n        var catNames = plan.collegeNames.concat(plan.majorNames, plan.minorNames);\n        var numUnits = 0;\n        var numCompletedUnits = 0;\n        for (var i = 0; i < catNames.length; i++) {\n            var currReq = categories[i][catNames[i]]['Requirements']\n            for (var j = 0; j < currReq.length; j++) {\n                var completed = []\n                for (let k = 0; k < plan.autoCompleted.length; k++) {\n                    if(plan.autoCompleted[k][0] === catNames[i] && plan.autoCompleted[k][1] === currReq[j]['Requirement']) {\n                        completed.push('true')\n                    }\n                }\n                if (completed.length===0) {\n                    var numCompletedUnits = numCompletedUnits + findUnitsTakeninRequirement(plan.semesters, currReq[j])}\n                else {var numCompletedUnits = numCompletedUnits + currReq[j]['Minimum Units']}\n                numUnits += currReq[j]['Minimum Units'];\n            }\n        }\n    \n    return Math.floor((numCompletedUnits / numUnits) * 100);\n    }\n\n    plan['totalProgress'] = totalProg;\n    plans.push(plan);\n\n}\n\nexport function setCompletedCourses(list) {\n    completedCourses = list\n}\n\nexport function deletePlan(i) {\n    plans.splice(i, 1)\n}\n\nexport function editDegrees(enrollments, i) {\n    plans[i].collegeNames = Object.keys(enrollments['Colleges'])\n    plans[i].majorNames = findMajorNames(enrollments); \n    plans[i].minorNames = findMinorNames(enrollments);\n\n    plans[i].majorData = findMajorData(enrollments);\n    plans[i].minorData = findMinorData(enrollments);\n    plans[i].collegeData = findCollegeData(enrollments);\n}\n\nexport function addAutocomplete(reqPath, i) {\n    plans[i]['autoCompleted'].push(reqPath)\n}\n\nexport function removeAutocomplete(reqPath, i) {\n    plans[i].autoCompleted.splice(plans[i].autoCompleted.indexOf(reqPath), 1)\n}\n\nexport function addCustomCourse(course, sem, plan) {\n    plans[plan]['semesters'][sem][1].push(course)\n}\n\nexport function removeCustomCourse(course, plan) {\n    debugger;\n    for (let i = 0; i < plans[plan]['autoCompleted'].length; i++) {\n        if (plans[plan]['autoCompleted'][i][3] === course) {\n            plans[plan].autoCompleted.splice(i, 1)\n            return\n        }\n    }\n}\n\n\nfunction findMajorData(enrollments) {\n    /* Goes through every college, finds the js/json files that contain information about every major in each college*/\n    /* return data in the form [{'Data Science': {\n                                    'Requirements': \n                                        [{\n                                        'Division': ...,\n                                        'Requirement': ...,\n                                        \"Number of Classes\": ...,\n                                        \"Minimum Units\": ...,\n                                        \"Course\": [courses[...], ...]\n                                        }]\n                                    }}]*/\n    var userMajors = [];\n    var collegeNames = Object.keys(enrollments['Colleges']);\n    for (let i = 0; i < collegeNames.length; i++) {\n        for (let j = 0; j < enrollments['Colleges'][collegeNames[i]]['Majors'].length; j++) {\n            let currMajor = enrollments['Colleges'][collegeNames[i]]['Majors'][j];\n            let catalogDict = catalog['Colleges'][collegeNames[i]]['Majors'][currMajor];\n            let dict = {[currMajor]: catalogDict}\n            userMajors.push(dict);\n        }\n    }\n    return userMajors;\n}\n\nfunction findMajorNames(enrollments) {\n    var userMajors = [];\n    var collegeNames = Object.keys(enrollments['Colleges']);\n    for (let i = 0; i < collegeNames.length; i++) {\n        for (let j = 0; j < enrollments['Colleges'][collegeNames[i]]['Majors'].length; j++) {\n            let currMajor = enrollments['Colleges'][collegeNames[i]]['Majors'][j];\n            userMajors.push(currMajor);\n        }\n    }\n    return userMajors;\n}\n\nfunction findCollegeData(enrollments) {\n    var userColleges = [];\n    var collegeNames = Object.keys(enrollments['Colleges']);\n    for (let i = 0; i < collegeNames.length; i++) {\n        let currCollege = collegeNames[i];\n        let catalogDict = catalog['Colleges'][currCollege]['College Requirements'];\n        let dict = {[currCollege]: catalogDict}\n        userColleges.push(dict);\n    }\n    return userColleges;\n}\n\nfunction findMinorData(enrollments) {\n    var userMinors = [];\n    var collegeNames = Object.keys(enrollments['Colleges']);\n    for (let i = 0; i < collegeNames.length; i++) {\n        for (let j = 0; j < enrollments['Colleges'][collegeNames[i]]['Minors'].length; j++) {\n            let currMinor = enrollments['Colleges'][collegeNames[i]]['Minors'][j];\n            let catalogDict = catalog['Colleges'][collegeNames[i]]['Minors'][currMinor];\n            let dict = {[currMinor]: catalogDict}\n            userMinors.push(dict);\n        }\n    }\n    return userMinors;\n}\n\nfunction findMinorNames(enrollments) {\n    var userMinors = [];\n    var collegeNames = Object.keys(enrollments['Colleges']);\n    for (let i = 0; i < collegeNames.length; i++) {\n        for (let j = 0; j < enrollments['Colleges'][collegeNames[i]]['Minors'].length; j++) {\n            let currMinor = enrollments['Colleges'][collegeNames[i]]['Minors'][j];\n            userMinors.push(currMinor);\n        }\n    }\n    return userMinors;\n}\n\nfunction findUnitsTakeninRequirement(semesters, requirement) {\n    let userCourses = getCoursesFromSemesters(semesters);\n    let unitsTaken = 0;\n    var courses = requirement['Course']\n    \n    if (courses[0] !== 'departmentsubgroup') {\n\n        let singleCourses = [];\n        let groups = [];\n\n        for (let i = 0; i < courses.length; i++) {\n            if (!isArray(courses[i])) {\n                singleCourses.push(courses[i])\n            } else {\n                groups.push(courses[i])\n            }\n        }\n\n        for (let i = 0; i < singleCourses.length; i++) {\n            for (let j = 0; j < userCourses.length; j++) {\n                if (singleCourses[i]['Course'] === userCourses[j]['Course']['Course']) {\n                    unitsTaken += singleCourses[i]['Units'];\n                }\n            }\n        }\n\n        let groupUnits = [];\n        for (let i = 0; i < groups.length; i++) {\n            let curGroupUnits = [0,0]\n            for (let j = 0; j < groups[i].length; j++) {\n                for (let k = 0; k < userCourses.length; k++) {\n                    if (userCourses[k]['Course']['Course'] === groups[i][j]['Course']) {\n                        curGroupUnits.push(groups[i][j]['Units'])\n                    }\n                }\n            }\n            let total = curGroupUnits.reduce(getSum);\n            groupUnits.push(total);\n        }\n    \n        let maxGroupUnits = [0];\n        for (let i = 0; i < groupUnits.length; i++) {\n            if (groupUnits[i] > maxGroupUnits[maxGroupUnits.length -1]) {\n                maxGroupUnits.push(groupUnits[i])\n            }\n        }\n        if (maxGroupUnits[maxGroupUnits.length -1] > unitsTaken) {\n            unitsTaken = maxGroupUnits[maxGroupUnits.length -1]\n        }\n    \n        if (unitsTaken > requirement['Minimum Units']) {\n            return requirement['Minimum Units']\n        } else {\n            return unitsTaken;\n        }\n    } else {\n        var groups = courses[1];\n        for (let i = 0; i < groups.length; i++) {\n            for (let j = 0; j < groups[i][1].length; j++) {\n                for (let k = 0; k < userCourses.length; k++) {\n                    if (groups[i][1][j]['Course'] === userCourses[k]['Course']['Course']) {\n                        unitsTaken =+ groups[i][1][j]['Units']\n                    }\n                }\n            }\n        }\n        if (unitsTaken > requirement['Minimum Units']) {\n            return requirement['Minimum Units']\n        } else {\n            return unitsTaken;\n        }\n    }\n}\n\nfunction generateLength(start, end) {\n    let listDates = [start];\n    const splitStart = start.split(\" \");\n    let currSeason =  splitStart[0];\n    let currYear = parseInt(splitStart[1], 10);\n    const splitEnd = end.split(\" \");\n    const endSeason = splitEnd[0];\n    const endYear = parseInt(splitEnd[1], 10);\n    var i = 0;\n    while (i < 20) {\n        if (currSeason === (endSeason) && currYear === endYear) {\n            break;\n        }\n        if (currSeason === 'Spring') {\n            currSeason = 'Fall';\n        } else {\n            currSeason = 'Spring';\n            currYear++;\n        }\n        listDates.push(currSeason + ' ' + currYear.toString());\n        i++;\n    }\n    return listDates.length\n}\n\nfunction getSum(total, num) {\n    return total + Math.round(num);\n}\n\nfunction generateDates(start, end) {\n    let listDates = [[start, []]];\n    const splitStart = start.split(\" \");\n    let currSeason =  splitStart[0];\n    let currYear = parseInt(splitStart[1], 10);\n    const splitEnd = end.split(\" \");\n    const endSeason = splitEnd[0];\n    const endYear = parseInt(splitEnd[1], 10);\n    var i = 0;\n    while (i < 20) {\n        if (currSeason === (endSeason) && currYear === endYear) {\n            break;\n        }\n        if (currSeason === 'Spring') {\n            currSeason = 'Fall';\n        } else {\n            currSeason = 'Spring';\n            currYear++;\n        }\n        var semester = currSeason + ' ' + currYear.toString()\n        var compCourseList = []\n        for (let j = 0; j < completedCourses.length; j ++) {\n            if (completedCourses[j][0] === semester) {\n                for (let k = 0; k < completedCourses[j][1].length; k ++) {\n                    compCourseList.push(courses[completedCourses[j][1][k]])\n                }\n            }\n        }\n        listDates.push([semester, compCourseList]);\n        i++;\n    }\n    return listDates\n}\n\n  function isArray(value) {\n    return value && typeof value === 'object' && value.constructor === Array;\n}\n\nfunction getCoursesFromSemesters(semesters) {\n    var courseLists = [];\n    for (let i = 0; i < semesters.length; i++) {\n        courseLists.push(semesters[i][1])\n    }\n    return ([].concat.apply([], courseLists))\n}"]},"metadata":{},"sourceType":"module"}