{"ast":null,"code":"var _jsxFileName = \"/Users/quinndarling/Desktop/beartracks-1.0/src/Components/PlannerComponent/Planner.js\";\nimport React, { Component } from 'react';\nimport CategoryList from '../CategoryListComponent/CategoryList';\nimport FourYearPlan from '../FourYearPlan/FourYearPlan';\nimport { plans, makePlan, deletePlan, editDegrees } from '../../UserPlans/User.js';\nimport { Card, Nav, Modal, Form, Col, Row, Button } from 'react-bootstrap';\nimport Select from 'react-select';\nimport { Tabs, Tab, Fab, IconButton, Tooltip } from '@material-ui/core';\nimport { ThemeProvider } from '@material-ui/styles';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport Fade from '@material-ui/core/Fade';\n\nfunction getListofYears() {\n  var currentTime = new Date();\n  var year = currentTime.getFullYear();\n  var listofyears = [year - 4];\n\n  for (let i = 1; i < 10; i++) {\n    listofyears.push(year - 4 + i);\n  }\n\n  return listofyears;\n}\n\nfunction isEarlier(testDate, setDate) {\n  const splitTest = testDate.split(\" \");\n  const splitSet = setDate.split(\" \");\n  let testYear = splitTest[1];\n  let testTerm = splitTest[0];\n  let setYear = splitSet[1];\n  let setTerm = splitSet[0];\n\n  if (testYear < setYear) {\n    return true;\n  }\n\n  if (testYear > setYear) {\n    return false;\n  } else {\n    if (testTerm === 'Spring') {\n      return true;\n    }\n\n    if (testTerm === 'Fall') {\n      return false;\n    } else {\n      if (setTerm === 'Fall') {\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }\n}\n\nconst majorOptions = [{\n  value: ['College of Letters and Sciences', 'Data Science'],\n  label: 'Data Science'\n}, {\n  value: ['College of Letters and Sciences', 'Mathematics'],\n  label: 'Mathematics'\n}, {\n  value: ['College of Letters and Sciences', 'Computer Science'],\n  label: 'Computer Science'\n}, {\n  value: ['College of Engineering', 'Civil Engineering'],\n  label: 'Civil Engineering'\n}, {\n  value: ['College of Letters and Sciences', 'Statistics'],\n  label: 'Statistics'\n}];\nconst minorOptions = [{\n  value: ['College of Letters and Sciences', 'Philosophy'],\n  label: 'Philosophy'\n}, {\n  value: ['College of Letters and Sciences', 'Linguistics'],\n  label: 'Linguistics'\n}, {\n  value: ['College of Letters and Sciences', 'Geosystems'],\n  label: 'Geosystems'\n}, {\n  value: ['College of Letters and Sciences', 'Mathematics'],\n  label: 'Mathematics'\n}];\n\nclass Planner extends Component {\n  constructor() {\n    super();\n    this.state = {\n      selectedPlan: 0,\n      shouldUpdate: false,\n      numPlans: plans.length,\n      showModal: false,\n      title: null,\n      startTerm: \"Fall\",\n      startYear: 2016,\n      endTerm: \"Fall\",\n      endYear: 2020,\n      majors: majorOptions.filter(a => plans[0].majorNames.indexOf(a.label) !== -1),\n      minors: minorOptions.filter(a => plans[0].minorNames.indexOf(a.label) !== -1),\n      showAddSemester: false,\n      selectedTerm: \"Fall\",\n      selectedYear: getListofYears()[0],\n      majorsLnS: ['Computer Science', 'Data Science', 'Mathematics'],\n      majorsCoE: ['Environmental Engineering', 'Electical Engineering & Computer Science', 'Civil Engineering'],\n      minorsLnS: ['Philosophy', 'Linguistics', 'Physics'],\n      minorsCoE: ['Geosystems', 'Electronic Intelligent Systems', 'Structural Engineering'],\n      // List of all majors at Cal\n      colleges: ['College of Letters and Sciences', 'College of Engineering'],\n      showDeletePlan: false,\n      showEditDegrees: false,\n      showMinorErrorModal: false,\n      showMajorErrorModal: false,\n      semestersShouldUpdate: false\n    };\n    this.startTermInput = React.createRef();\n    this.startYearInput = React.createRef();\n    this.endTermInput = React.createRef();\n    this.endYearInput = React.createRef();\n    this.majorInput = React.createRef();\n    this.minorInput = React.createRef();\n    this.titleInput = React.createRef();\n    this.onDelete = this.onDelete.bind(this);\n    this.onUpdate = this.onUpdate.bind(this);\n    this.changePlan = this.changePlan.bind(this);\n    this.toggleModal = this.toggleModal.bind(this);\n    this.updateTitle = this.updateTitle.bind(this);\n    this.updateStartTerm = this.updateStartTerm.bind(this);\n    this.updateStartYear = this.updateStartYear.bind(this);\n    this.updateEndTerm = this.updateEndTerm.bind(this);\n    this.updateEndYear = this.updateEndYear.bind(this);\n    this.updateMajor = this.updateMajor.bind(this);\n    this.updateMinor = this.updateMinor.bind(this);\n    this.addPlan = this.addPlan.bind(this);\n    this.showAddSemester = this.showAddSemester.bind(this);\n    this.changeSelectedTerm = this.changeSelectedTerm.bind(this);\n    this.changeSelectedYear = this.changeSelectedYear.bind(this);\n    this.openDrawer = this.openDrawer.bind(this);\n    this.closeDrawer = this.closeDrawer.bind(this);\n    this.deletePlan = this.deletePlan.bind(this);\n    this.showDeletePlan = this.showDeletePlan.bind(this);\n    this.hideDeletePlan = this.hideDeletePlan.bind(this);\n    this.showEditDegrees = this.showEditDegrees.bind(this);\n    this.updateDegrees = this.updateDegrees.bind(this);\n    this.closeMinorErrorModal = this.closeMinorErrorModal.bind(this);\n    this.closeMajorErrorModal = this.closeMajorErrorModal.bind(this);\n    this.renderSemesters = this.renderSemesters.bind(this);\n  }\n\n  openDrawer() {\n    this.setState({\n      openDrawer: true\n    });\n  }\n\n  closeDrawer() {\n    this.setState({\n      openDrawer: false\n    });\n  }\n\n  format() {\n    const startSem = this.state.startTerm + ' ' + this.state.startYear;\n    const endSem = this.state.endTerm + ' ' + this.state.endYear;\n    const noMajor = [];\n    const enrollments = {\n      'Colleges': {}\n    };\n\n    if (this.state.majors.length === 0) {\n      return [0, 0, 0, 'majorError'];\n    }\n\n    for (let i = 0; i < this.state.majors.length; i++) {\n      if (this.state.majors[i]['value'][0] in enrollments['Colleges']) {\n        enrollments['Colleges'][this.state.majors[i]['value'][0]]['Majors'].push(this.state.majors[i]['value'][1]);\n      } else {\n        enrollments['Colleges'][this.state.majors[i]['value'][0]] = {\n          'Majors': [this.state.majors[i]['value'][1]],\n          'Minors': []\n        };\n      }\n    }\n\n    for (let j = 0; j < this.state.minors.length; j++) {\n      if (this.state.minors[j]['value'][0] in enrollments['Colleges']) {\n        enrollments['Colleges'][this.state.minors[j]['value'][0]]['Minors'].push(this.state.minors[j]['value'][1]);\n      } else {\n        noMajor.push(this.state.minors[j]['value'][1]);\n      }\n    }\n\n    if (noMajor.length > 0) {\n      return [startSem, endSem, enrollments, 'minorError'];\n    }\n\n    return [startSem, endSem, enrollments, 'none'];\n  }\n\n  addPlan() {\n    const inputs = this.format();\n\n    if (inputs[3] === 'none') {\n      makePlan(inputs[0], inputs[1], inputs[2], this.state.title);\n      this.setState({\n        showModal: false,\n        title: null,\n        startTerm: \"Fall\",\n        startYear: 2016,\n        endTerm: \"Fall\",\n        endYear: 2021,\n        majors: majorOptions.filter(a => plans[plans.length - 1].majorNames.indexOf(a.label) !== -1),\n        minors: minorOptions.filter(a => plans[plans.length - 1].minorNames.indexOf(a.label) !== -1),\n        numPlans: plans.length\n      });\n    }\n\n    if (inputs[3] === 'majorError') {\n      this.setState({\n        showMajorErrorModal: true,\n        majors: majorOptions.filter(a => plans[this.state.selectedPlan].majorNames.indexOf(a.label) !== -1),\n        minors: minorOptions.filter(a => plans[this.state.selectedPlan].minorNames.indexOf(a.label) !== -1)\n      });\n    }\n\n    if (inputs[3] === 'minorError') {\n      makePlan(inputs[0], inputs[1], inputs[2], this.state.title);\n      this.setState({\n        showMinorErrorModal: true,\n        title: null,\n        startTerm: \"Fall\",\n        startYear: 2016,\n        endTerm: \"Fall\",\n        endYear: 2021,\n        majors: majorOptions.filter(a => plans[this.state.numPlans + 1].majorNames.indexOf(a.label) !== -1),\n        minors: minorOptions.filter(a => plans[this.state.numPlans + 1].minorNames.indexOf(a.label) !== -1),\n        numPlans: plans.length\n      });\n    }\n  }\n\n  closeMajorErrorModal() {\n    this.setState({\n      showMajorErrorModal: false\n    });\n  }\n\n  closeMinorErrorModal() {\n    this.setState({\n      showMinorErrorModal: false\n    });\n  }\n\n  showDeletePlan() {\n    this.setState({\n      showDeletePlan: true\n    });\n  }\n\n  hideDeletePlan() {\n    this.setState({\n      showDeletePlan: false\n    });\n  }\n\n  deletePlan() {\n    deletePlan(this.state.selectedPlan);\n    this.setState({\n      numPlans: this.state.numPlans - 1,\n      selectedPlan: 0,\n      showDeletePlan: false\n    });\n    this.onUpdate();\n  }\n\n  updateTitle() {\n    this.setState({\n      title: this.titleInput.current.value\n    });\n  }\n\n  updateStartTerm() {\n    this.setState({\n      startTerm: this.startTermInput.current.value\n    });\n  }\n\n  updateStartYear() {\n    this.setState({\n      startYear: this.startYearInput.current.value\n    });\n  }\n\n  updateEndTerm() {\n    this.setState({\n      endTerm: this.endTermInput.current.value\n    });\n  }\n\n  updateEndYear() {\n    this.setState({\n      endYear: this.endYearInput.current.value\n    });\n  }\n\n  updateMajor(option) {\n    const majors = [];\n\n    for (let i = 0; i < option.length; i++) {\n      majors.push(option[i]);\n    }\n\n    this.setState({\n      majors: majors\n    });\n  }\n\n  updateMinor(option) {\n    const minors = [];\n\n    for (let i = 0; i < option.length; i++) {\n      minors.push(option[i]);\n    }\n\n    this.setState({\n      minors: minors\n    });\n  }\n\n  updateDegrees() {\n    const inputs = this.format();\n    const enrollments = inputs[2];\n\n    if (inputs[3] === 'majorError') {\n      this.setState({\n        showMajorErrorModal: true\n      });\n    }\n\n    if (inputs[3] === 'minorError') {\n      editDegrees(enrollments, this.state.selectedPlan);\n      this.setState({\n        showMinorErrorModal: true,\n        title: null,\n        startTerm: \"Fall\",\n        startYear: 2016,\n        endTerm: \"Fall\",\n        endYear: 2021\n      });\n    }\n\n    if (inputs[3] === 'none') {\n      editDegrees(enrollments, this.state.selectedPlan);\n      this.setState({\n        showEditDegrees: false\n      });\n    }\n\n    this.onDelete();\n  }\n\n  toggleModal() {\n    console.log(\"called\");\n    let bool = !this.state.showModal;\n    this.setState({\n      showModal: bool,\n      majors: majorOptions.filter(a => plans[this.state.selectedPlan].majorNames.indexOf(a.label) !== -1),\n      minors: minorOptions.filter(a => plans[this.state.selectedPlan].minorNames.indexOf(a.label) !== -1)\n    });\n  }\n\n  onDelete() {\n    // gets called when a course is deleted in a semester,\n    // should update is then passed down to requirement so it knows to rerender the course that was deleted\n    this.setState({\n      shouldUpdate: true\n    });\n  }\n\n  onUpdate() {\n    // When course is rerendered, calls this method, changes shouldUpdate to false so it stops updating\n    this.setState({\n      shouldUpdate: false\n    });\n  }\n\n  renderSemesters() {\n    debugger;\n    var change = !this.state.semestersShouldUpdate;\n    this.setState({\n      semestersShouldUpdate: change\n    });\n  }\n\n  changePlan(plan) {\n    this.setState({\n      selectedPlan: plan\n    });\n  }\n\n  showAddSemester() {\n    this.setState({\n      showAddSemester: true\n    });\n  }\n\n  changeSelectedTerm(event) {\n    const term = event.target.value;\n    this.setState({\n      selectedTerm: term\n    });\n  }\n\n  changeSelectedYear(event) {\n    const year = event.target.value;\n    this.setState({\n      selectedYear: year\n    });\n  }\n\n  addSemester(term, year) {\n    if (term === 'Term' || year === 'Year') {\n      this.resetAddSemester();\n      return;\n    }\n\n    const semDate = term + ' ' + year;\n    const numSemesters = plans[this.state.selectedPlan].semesters.length;\n\n    for (let i = 0; i < numSemesters; i++) {\n      if (plans[this.state.selectedPlan].semesters[i][0] === semDate) {\n        this.resetAddSemester();\n        return;\n      }\n\n      if (isEarlier(semDate, plans[this.state.selectedPlan].semesters[i][0])) {\n        plans[this.state.selectedPlan].semesters.splice(i, 0, [semDate, []]);\n        break;\n      }\n    }\n\n    if (numSemesters === plans[this.state.selectedPlan].semesters.length) {\n      plans[this.state.selectedPlan].semesters.push([semDate, []]);\n    }\n\n    this.resetAddSemester();\n  }\n\n  resetAddSemester() {\n    this.setState({\n      selectedTerm: 'Fall',\n      selectedYear: getListofYears()[0],\n      showAddSemester: false\n    });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n  }\n\n  showEditDegrees(show) {\n    this.setState({\n      showEditDegrees: show\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"Planner\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 418\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"CourseContainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 419\n      },\n      __self: this\n    }, React.createElement(CategoryList //['College of Letters and Sciences', 'Data Science', 'Energy Engineering]\n    , {\n      categories: plans[this.state.selectedPlan].collegeNames.concat(plans[this.state.selectedPlan].majorNames, plans[this.state.selectedPlan].minorNames) //Concatenates all college, major, minor data\n      ,\n      data: plans[this.state.selectedPlan].collegeData.concat(plans[this.state.selectedPlan].majorData, plans[this.state.selectedPlan].minorData),\n      onUpdate: () => this.onUpdate(),\n      shouldUpdate: this.state.shouldUpdate,\n      progress: plans[this.state.selectedPlan]['totalProgress'](),\n      selectedPlan: plans[this.state.selectedPlan],\n      selectedPlanNum: this.state.selectedPlan,\n      planIndex: this.state.selectedPlan,\n      renderSemesters: () => this.renderSemesters(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 420\n      },\n      __self: this\n    })), React.createElement(Card, {\n      className: \"PlanNav\",\n      bg: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 433\n      },\n      __self: this\n    }, React.createElement(Card.Header, {\n      className: \"PlanHeader\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 434\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 435\n      },\n      __self: this\n    }, React.createElement(ThemeProvider, {\n      theme: theme,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 436\n      },\n      __self: this\n    }, React.createElement(Tabs, {\n      value: this.state.selectedPlan,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 437\n      },\n      __self: this\n    }, plans.map((plan, index) => {\n      return React.createElement(Tab, {\n        className: \"planTab\",\n        label: plan['name'],\n        onClick: () => this.changePlan(index),\n        value: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 439\n        },\n        __self: this\n      });\n    })))), React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 444\n      },\n      __self: this\n    }, React.createElement(ThemeProvider, {\n      theme: theme,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 445\n      },\n      __self: this\n    }, React.createElement(Fab, {\n      variant: \"extended\",\n      size: \"large\",\n      onClick: () => this.toggleModal(),\n      className: \"addPlanButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 446\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      className: \"addPlanIcon\",\n      src: require(\"../../Images/plus.png\"),\n      height: \"20\",\n      width: \"20\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 447\n      },\n      __self: this\n    }), React.createElement(\"a\", {\n      className: \"AddPlanText\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 448\n      },\n      __self: this\n    }, \"New Plan\"))))), React.createElement(Card.Body, {\n      className: \"PlanCardBody\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 494\n      },\n      __self: this\n    }, React.createElement(FourYearPlan, {\n      semesters: plans[this.state.selectedPlan].semesters,\n      onDelete: () => this.onDelete(),\n      selectedPlan: plans[this.state.selectedPlan],\n      planIndex: this.state.selectedPlan,\n      semestersShouldUpdate: this.state.semestersShouldUpdate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 495\n      },\n      __self: this\n    })), React.createElement(Card.Footer, {\n      className: \"PlanFooter\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 502\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"PlanOptions\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 503\n      },\n      __self: this\n    }, React.createElement(Tooltip, {\n      title: \"Add Semester\",\n      TransitionComponent: Fade,\n      TransitionProps: {\n        timeout: {\n          enter: 600,\n          exit: 100\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 504\n      },\n      __self: this\n    }, React.createElement(IconButton, {\n      className: \"PlanOptionsButton\",\n      onClick: () => this.showAddSemester(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 505\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: require(\"../../Images/addSemester.png\"),\n      height: \"25\",\n      width: \"25\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 506\n      },\n      __self: this\n    }))), React.createElement(Tooltip, {\n      title: \"Edit Degrees\",\n      TransitionComponent: Fade,\n      TransitionProps: {\n        timeout: {\n          enter: 600,\n          exit: 100\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 509\n      },\n      __self: this\n    }, React.createElement(IconButton, {\n      className: \"PlanOptionsButton\",\n      onClick: () => this.showEditDegrees(true),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 510\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: require(\"../../Images/editDegrees.png\"),\n      height: \"25\",\n      width: \"25\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 511\n      },\n      __self: this\n    }))), React.createElement(Tooltip, {\n      title: \"Download Plan\",\n      TransitionComponent: Fade,\n      TransitionProps: {\n        timeout: {\n          enter: 600,\n          exit: 100\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 514\n      },\n      __self: this\n    }, React.createElement(IconButton, {\n      className: \"PlanOptionsButton\",\n      onClick: this.createAndDownloadPdf,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 515\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: require(\"../../Images/exportPlan.png\"),\n      height: \"25\",\n      width: \"25\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 516\n      },\n      __self: this\n    }))), React.createElement(Tooltip, {\n      title: \"Delete Plan\",\n      TransitionComponent: Fade,\n      TransitionProps: {\n        timeout: {\n          enter: 600,\n          exit: 100\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 519\n      },\n      __self: this\n    }, React.createElement(IconButton, {\n      className: \"PlanOptionsButton\",\n      onClick: () => this.showDeletePlan(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 520\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: require(\"../../Images/deletePlan.png\"),\n      height: \"25\",\n      width: \"25\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 521\n      },\n      __self: this\n    })))))), React.createElement(Modal, {\n      show: this.state.showEditDegrees,\n      onHide: () => this.showEditDegrees(false),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 595\n      },\n      __self: this\n    }, React.createElement(Modal.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 596\n      },\n      __self: this\n    }, React.createElement(Modal.Title, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 597\n      },\n      __self: this\n    }, \"Edit Degrees\")), React.createElement(Modal.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 599\n      },\n      __self: this\n    }, React.createElement(Form, {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 600\n      },\n      __self: this\n    }, React.createElement(Form.Group, {\n      controlId: \"editMajors\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 601\n      },\n      __self: this\n    }, React.createElement(Form.Label, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 602\n      },\n      __self: this\n    }, \"Majors\"), React.createElement(Select, {\n      defaultValue: majorOptions.filter(a => plans[this.state.selectedPlan].majorNames.indexOf(a.label) !== -1),\n      isMulti: true,\n      name: \"intendedMinors\",\n      className: \"intendedMinors\",\n      options: majorOptions,\n      placeHolder: \"Intended Major(s)\",\n      onChange: this.updateMajor,\n      ref: this.majorInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 605\n      },\n      __self: this\n    })), React.createElement(Form.Group, {\n      controlId: \"editMinors\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 616\n      },\n      __self: this\n    }, React.createElement(Form.Label, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 617\n      },\n      __self: this\n    }, \"Minors\"), React.createElement(Select, {\n      defaultValue: minorOptions.filter(a => plans[this.state.selectedPlan].minorNames.indexOf(a.label) !== -1),\n      isMulti: true,\n      name: \"intendedMinors\",\n      className: \"intendedMinors\",\n      options: minorOptions,\n      placeHolder: \"Intended Minor(s)\",\n      onChange: this.updateMinor,\n      ref: this.minorInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 620\n      },\n      __self: this\n    })), React.createElement(Button, {\n      className: \"addButton\",\n      variant: \"primary\",\n      type: \"submit\",\n      onClick: () => this.updateDegrees(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 631\n      },\n      __self: this\n    }, \"Done\")))), React.createElement(Modal, {\n      show: this.state.showModal,\n      onHide: this.toggleModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 639\n      },\n      __self: this\n    }, React.createElement(Modal.Header, {\n      closeButton: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 640\n      },\n      __self: this\n    }, React.createElement(Modal.Title, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 641\n      },\n      __self: this\n    }, \"Add a plan\")), React.createElement(Modal.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 643\n      },\n      __self: this\n    }, React.createElement(Form, {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 644\n      },\n      __self: this\n    }, React.createElement(Form.Group, {\n      controlId: \"planTitle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 645\n      },\n      __self: this\n    }, React.createElement(Form.Label, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 646\n      },\n      __self: this\n    }, \"Plan Title\"), React.createElement(Form.Control, {\n      type: \"text\",\n      placeHolder: \"Enter name\",\n      onChange: this.updateTitle,\n      ref: this.titleInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 649\n      },\n      __self: this\n    })), React.createElement(Form.Group, {\n      controlId: \"selectFirstTerm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 652\n      },\n      __self: this\n    }, React.createElement(Form.Label, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 653\n      },\n      __self: this\n    }, \"Select first semester\"), React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 656\n      },\n      __self: this\n    }, React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 657\n      },\n      __self: this\n    }, React.createElement(Form.Control, {\n      as: \"select\",\n      placeHolder: \"Term\",\n      onChange: this.updateStartTerm,\n      ref: this.startTermInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 658\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 659\n      },\n      __self: this\n    }, \"Fall\"), React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 660\n      },\n      __self: this\n    }, \"Spring\"), React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 661\n      },\n      __self: this\n    }, \"Summer\"))), React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 664\n      },\n      __self: this\n    }, React.createElement(Form.Control, {\n      as: \"select\",\n      placeHolder: \"Year\",\n      onChange: this.updateStartYear,\n      ref: this.startYearInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 665\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 666\n      },\n      __self: this\n    }, \"2016\"), React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 667\n      },\n      __self: this\n    }, \"2017\"), React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 668\n      },\n      __self: this\n    }, \"2018\"), React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 669\n      },\n      __self: this\n    }, \"2019\"), React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 670\n      },\n      __self: this\n    }, \"2020\"))))), React.createElement(Form.Group, {\n      controlId: \"selectLastTerm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 675\n      },\n      __self: this\n    }, React.createElement(Form.Label, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 676\n      },\n      __self: this\n    }, \"Select last semester\"), React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 679\n      },\n      __self: this\n    }, React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 680\n      },\n      __self: this\n    }, React.createElement(Form.Control, {\n      as: \"select\",\n      placeHolder: \"Term\",\n      onChange: this.updateEndTerm,\n      ref: this.endTermInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 681\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 682\n      },\n      __self: this\n    }, \"Fall\"), React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 683\n      },\n      __self: this\n    }, \"Spring\"), React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 684\n      },\n      __self: this\n    }, \"Summer\"))), React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 687\n      },\n      __self: this\n    }, React.createElement(Form.Control, {\n      as: \"select\",\n      placeHolder: \"Year\",\n      onChange: this.updateEndYear,\n      ref: this.endYearInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 688\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 690\n      },\n      __self: this\n    }, \"2020\"), React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 691\n      },\n      __self: this\n    }, \"2021\"), React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 692\n      },\n      __self: this\n    }, \"2022\"), React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 693\n      },\n      __self: this\n    }, \"2023\"), React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 694\n      },\n      __self: this\n    }, \"2024\"))))), React.createElement(Form.Group, {\n      controlId: \"selectMajor\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 699\n      },\n      __self: this\n    }, React.createElement(Form.Label, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 700\n      },\n      __self: this\n    }, \"Select a Major\"), React.createElement(Select, {\n      defaultValue: majorOptions.filter(a => plans[this.state.selectedPlan].majorNames.indexOf(a.label) !== -1),\n      isMulti: true,\n      name: \"intendedMinors\",\n      className: \"intendedMinors\",\n      options: majorOptions,\n      placeHolder: \"Intended Major(s)\",\n      onChange: this.updateMajor,\n      ref: this.majorInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 703\n      },\n      __self: this\n    })), React.createElement(Form.Group, {\n      controlId: \"selectMinor\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 714\n      },\n      __self: this\n    }, React.createElement(Form.Label, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 715\n      },\n      __self: this\n    }, \"Select a Minor\"), React.createElement(Select, {\n      defaultValue: minorOptions.filter(a => plans[this.state.selectedPlan].minorNames.indexOf(a.label) !== -1),\n      isMulti: true,\n      name: \"intendedMinors\",\n      className: \"intendedMinors\",\n      options: minorOptions,\n      placeHolder: \"Intended Minor(s)\",\n      onChange: this.updateMinor,\n      ref: this.minorInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 718\n      },\n      __self: this\n    })), React.createElement(Button, {\n      className: \"addButton\",\n      variant: \"primary\",\n      type: \"submit\",\n      onClick: () => this.addPlan(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 729\n      },\n      __self: this\n    }, \"Add\")))), React.createElement(Modal, {\n      show: this.state.showMajorErrorModal,\n      onHide: () => this.closeMajorErrorModal(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 737\n      },\n      __self: this\n    }, React.createElement(Modal.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 738\n      },\n      __self: this\n    }, \"You must have at least one major.\")), React.createElement(Modal, {\n      show: this.state.showMinorErrorModal,\n      onHide: () => this.closeMinorErrorModal(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 744\n      },\n      __self: this\n    }, React.createElement(Modal.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 745\n      },\n      __self: this\n    }, \"You cannot complete a minor without completing a major in the same college.\")), React.createElement(Modal, {\n      show: this.state.showAddSemester,\n      onHide: () => this.resetAddSemester(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 751\n      },\n      __self: this\n    }, React.createElement(Modal.Header, {\n      closeButton: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 752\n      },\n      __self: this\n    }, React.createElement(Modal.Title, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 753\n      },\n      __self: this\n    }, \"Add a Semester\")), React.createElement(Modal.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 755\n      },\n      __self: this\n    }, React.createElement(Form, {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 756\n      },\n      __self: this\n    }, React.createElement(Form.Group, {\n      controlId: \"selectTerm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 757\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 758\n      },\n      __self: this\n    }, React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 759\n      },\n      __self: this\n    }, React.createElement(Form.Control, {\n      as: \"select\",\n      placeHolder: \"Term\",\n      onChange: this.changeSelectedTerm,\n      value: this.state.selectedTerm,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 760\n      },\n      __self: this\n    }, [\"Fall\", \"Spring\", \"Summer\"].map((term, index) => {\n      return React.createElement(\"option\", {\n        value: term,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 763\n        },\n        __self: this\n      }, term);\n    }))), React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 767\n      },\n      __self: this\n    }, React.createElement(Form.Control, {\n      as: \"select\",\n      placeHolder: \"Year\",\n      onChange: this.changeSelectedYear,\n      value: this.state.selectedYear,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 768\n      },\n      __self: this\n    }, getListofYears().map((year, index) => {\n      return React.createElement(\"option\", {\n        value: year,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 771\n        },\n        __self: this\n      }, year);\n    }))))), React.createElement(Button, {\n      className: \"addButton\",\n      variant: \"primary\",\n      type: \"submit\",\n      onClick: () => this.addSemester(this.state.selectedTerm, this.state.selectedYear),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 777\n      },\n      __self: this\n    }, \"Add\")))), React.createElement(Modal, {\n      show: this.state.showDeletePlan,\n      onHide: () => this.hideDeletePlan(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 785\n      },\n      __self: this\n    }, this.state.numPlans > 1 && React.createElement(Modal.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 787\n      },\n      __self: this\n    }, React.createElement(Modal.Title, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 788\n      },\n      __self: this\n    }, \"Delete '\", plans[this.state.selectedPlan]['name'], \"'?\"), React.createElement(Button, {\n      onClick: () => this.deletePlan(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 791\n      },\n      __self: this\n    }, \"Yes\"), React.createElement(Button, {\n      onClick: () => this.hideDeletePlan(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 794\n      },\n      __self: this\n    }, \"No\")), this.state.numPlans <= 1 && React.createElement(Modal.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 799\n      },\n      __self: this\n    }, React.createElement(Modal.Title, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 800\n      },\n      __self: this\n    }, \"You can't delete your only plan!\"))));\n  }\n\n}\n\nconst theme = createMuiTheme({\n  overrides: {\n    // Style sheet name ⚛️\n    MuiTabs: {\n      indicator: {\n        color: '#ffffff',\n        backgroundColor: \"#ffffff\"\n      }\n    },\n    MuiFab: {\n      extended: {\n        width: '130px',\n        padding: '0px',\n        height: '95%'\n      }\n    }\n  }\n});\nexport default Planner;\n{\n  /* <Form.Group controlId=\"formFirstName\">\n                         <Form.Row>\n                             <Col>\n                             <Form.Control\n                                 type=\"firstName\"\n                                 name=\"firstName\"\n                                 placeholder=\"First Name\"\n                                 value=\"Dino\"\n                                 onChange={handleChange('firstName')}\n                                 />              \n                             </Col>\n                             <Col>\n                             <Form.Control\n                                 type=\"lastName\"\n                                 name=\"lastName\"\n                                 placeholder=\"Last Name\"\n                                 value=\"Ambrosi\"\n                                 onChange={handleChange('lastName')}\n                             />\n                             </Col>\n                         </Form.Row>\n                         </Form.Group>\n                         <Form.Group controlId=\"formEmailAddress\">\n                         <Form.Control\n                             type=\"email\"\n                             name=\"email\"\n                             placeholder=\"Email Address\"\n                             value=\"dino.ambrosi@berkeley.edu\"\n                             onChange={handleChange('email')}\n                             />\n                         </Form.Group>\n                         <Form.Group controlId=\"formPassword\">\n                         <Form.Control\n                             type=\"password\"\n                             name=\"password\"\n                             placeholder=\"Password\"\n                             value=\"dinguspingus\"\n                             onChange={handleChange('password')}\n                         />\n                         </Form.Group>\n                         <Form.Group>\n                         <Form.Row>\n                             <Col>\n                             <Form.Control\n                                 as=\"select\"\n                                 type=\"firstYear\"\n                                 name=\"firstYear\"\n                                 placeholder=\"First Year\"\n                                 value='2017'\n                                 onChange={handleChange('firstYear')}\n                                 >\n                                 <option>First Year</option>\n                                 <option>2015</option>\n                                 <option>2016</option>\n                                 <option>2017</option>\n                                 <option>2018</option>\n                                 <option>2019</option>\n                             </Form.Control>\n                             </Col>\n                             <Col>\n                             <Form.Check\n                                 checked={values.firstSemester === 'Fall'}\n                                 onChange={handleChange('firstSemester')}\n                                 inline\n                                 type=\"radio\"\n                                 name=\"firstSemester\"\n                                 label=\"Fall\"\n                                 value=\"Fall\" />\n                             <Form.Check\n                                 checked={values.firstSemester === 'Spring'}\n                                 onChange={handleChange('firstSemester')}\n                                 inline\n                                 type=\"radio\"\n                                 label=\"Spring\"\n                                 name=\"firstSemester\"\n                                 value=\"Spring\" />\n                             </Col>\n                         </Form.Row>\n                         </Form.Group>\n                         <Form.Group>\n                         <Form.Row>\n                             <Col>\n                             <Form.Control\n                                 as=\"select\"\n                                 type=\"lastYear\"\n                                 name=\"lastYear\"\n                                 placeholder=\"Last Year\"\n                                 value={values.lastYear}\n                                 onChange={handleChange('lastYear')}\n                             >\n                                 <option>Last Year</option>\n                                 <option>2019</option>\n                                 <option>2020</option>\n                                 <option>2021</option>\n                                 <option>2022</option>\n                                 <option>2023</option>\n                             </Form.Control>\n                             </Col>\n                             <Col>\n                             <Form.Check\n                                 checked={values.lastSemester === 'Fall'}\n                                 onChange={handleChange('lastSemester')}\n                                 inline\n                                 type=\"radio\"\n                                 name=\"lastSemester\"\n                                 label=\"Fall\"\n                                 value=\"Fall\" />\n                             <Form.Check\n                                 checked={values.lastSemester === 'Spring'}\n                                 onChange={handleChange('lastSemester')}\n                                 inline\n                                 type=\"radio\"\n                                 label=\"Spring\"\n                                 name=\"lastSemester\"\n                                 value=\"Spring\" />\n                             </Col>\n                         </Form.Row>\n                         </Form.Group>\n                         <Form.Group>\n                         <Select\n                             isMulti\n                             name=\"intendedMajors\"\n                             className=\"intendedMajors\"\n                             options={majorOptions}\n                             placeholder=\"Intended Major(s)\"\n                             onChange={(e) => (handleMajorChange(e))}\n                         />\n                         </Form.Group>\n                         <Form.Group>\n                         <Select\n                             isMulti\n                             name=\"intendedMinors\"\n                             className=\"intendedMinors\"\n                             options={minorOptions}\n                             placeholder=\"Intended Minor(s)\"\n                             onChange={(e) => (handleMinorChange(e))}\n                         />\n                         </Form.Group>\n                         <Button variant=\"primary\" onClick={this.back}>\n                         Back\n                         </Button>\n                         <Button variant=\"primary\" onClick={this.next}>\n                         Next\n                         </Button> */\n}","map":{"version":3,"sources":["/Users/quinndarling/Desktop/beartracks-1.0/src/Components/PlannerComponent/Planner.js"],"names":["React","Component","CategoryList","FourYearPlan","plans","makePlan","deletePlan","editDegrees","Card","Nav","Modal","Form","Col","Row","Button","Select","Tabs","Tab","Fab","IconButton","Tooltip","ThemeProvider","createMuiTheme","Fade","getListofYears","currentTime","Date","year","getFullYear","listofyears","i","push","isEarlier","testDate","setDate","splitTest","split","splitSet","testYear","testTerm","setYear","setTerm","majorOptions","value","label","minorOptions","Planner","constructor","state","selectedPlan","shouldUpdate","numPlans","length","showModal","title","startTerm","startYear","endTerm","endYear","majors","filter","a","majorNames","indexOf","minors","minorNames","showAddSemester","selectedTerm","selectedYear","majorsLnS","majorsCoE","minorsLnS","minorsCoE","colleges","showDeletePlan","showEditDegrees","showMinorErrorModal","showMajorErrorModal","semestersShouldUpdate","startTermInput","createRef","startYearInput","endTermInput","endYearInput","majorInput","minorInput","titleInput","onDelete","bind","onUpdate","changePlan","toggleModal","updateTitle","updateStartTerm","updateStartYear","updateEndTerm","updateEndYear","updateMajor","updateMinor","addPlan","changeSelectedTerm","changeSelectedYear","openDrawer","closeDrawer","hideDeletePlan","updateDegrees","closeMinorErrorModal","closeMajorErrorModal","renderSemesters","setState","format","startSem","endSem","noMajor","enrollments","j","inputs","current","option","console","log","bool","change","plan","event","term","target","addSemester","resetAddSemester","semDate","numSemesters","semesters","splice","handleSubmit","preventDefault","show","render","collegeNames","concat","collegeData","majorData","minorData","theme","map","index","require","timeout","enter","exit","createAndDownloadPdf","overrides","MuiTabs","indicator","color","backgroundColor","MuiFab","extended","width","padding","height"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport CategoryList from '../CategoryListComponent/CategoryList'\nimport FourYearPlan from '../FourYearPlan/FourYearPlan'\nimport { plans, makePlan, deletePlan, editDegrees } from '../../UserPlans/User.js'\nimport { Card, Nav, Modal, Form, Col, Row, Button} from 'react-bootstrap'\nimport Select from 'react-select';\nimport { Tabs, Tab, Fab, IconButton, Tooltip } from '@material-ui/core';\nimport {ThemeProvider} from '@material-ui/styles'\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport Fade from '@material-ui/core/Fade';\n\n\nfunction getListofYears() {\n    var currentTime = new Date();\n    var year = currentTime.getFullYear();\n    var listofyears = [year - 4];\n    for (let i = 1; i < 10; i++){\n        listofyears.push((year - 4) + i)\n    }\n    return (listofyears)\n}\n\nfunction isEarlier(testDate, setDate) {\n    const splitTest = testDate.split(\" \")\n    const splitSet = setDate.split(\" \")\n    let testYear = splitTest[1]\n    let testTerm = splitTest[0]\n    let setYear = splitSet[1]\n    let setTerm = splitSet[0]\n    if (testYear < setYear) {\n        return true;\n    }\n    if (testYear > setYear) {\n        return false;\n    } else {\n        if (testTerm === 'Spring') {\n            return true;\n        }\n        if (testTerm === 'Fall') {\n            return false;\n        } else {\n            if (setTerm === 'Fall') {\n                return true;\n            } else {\n                return false;\n            }\n        }\n    }\n}\n\nconst majorOptions = [\n    { value: ['College of Letters and Sciences', 'Data Science'], label: 'Data Science' },\n    { value: ['College of Letters and Sciences', 'Mathematics'], label: 'Mathematics' },\n    { value: ['College of Letters and Sciences', 'Computer Science'], label: 'Computer Science' },  \n    { value: ['College of Engineering', 'Civil Engineering'], label: 'Civil Engineering' },\n    { value: ['College of Letters and Sciences', 'Statistics'], label: 'Statistics'}      \n  ]\nconst minorOptions = [\n    { value: ['College of Letters and Sciences', 'Philosophy'], label: 'Philosophy' },      \n    { value: ['College of Letters and Sciences', 'Linguistics'], label: 'Linguistics' },      \n    { value: ['College of Letters and Sciences','Geosystems'], label: 'Geosystems' },\n    { value: ['College of Letters and Sciences','Mathematics'], label: 'Mathematics' }     \n  ]\n\nclass Planner extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            \n            selectedPlan: 0,\n            shouldUpdate: false,\n            numPlans: plans.length,\n            showModal: false,\n            title: null,\n            startTerm: \"Fall\",\n            startYear: 2016,\n            endTerm: \"Fall\",\n            endYear: 2020,\n            majors: majorOptions.filter(a => plans[0].majorNames.indexOf(a.label) !== -1),\n            minors: minorOptions.filter(a => plans[0].minorNames.indexOf(a.label) !== -1),\n            showAddSemester: false,\n            selectedTerm: \"Fall\",\n            selectedYear: getListofYears()[0],\n            majorsLnS: ['Computer Science', 'Data Science', 'Mathematics'],\n            majorsCoE: ['Environmental Engineering', 'Electical Engineering & Computer Science', 'Civil Engineering'],\n            minorsLnS: ['Philosophy', 'Linguistics', 'Physics'],\n            minorsCoE: ['Geosystems', 'Electronic Intelligent Systems', 'Structural Engineering'],\n            // List of all majors at Cal\n            colleges: ['College of Letters and Sciences', 'College of Engineering'],\n            showDeletePlan: false,\n            showEditDegrees: false,\n            showMinorErrorModal: false,\n            showMajorErrorModal: false,\n            semestersShouldUpdate: false\n        }\n        this.startTermInput = React.createRef();\n        this.startYearInput = React.createRef();\n        this.endTermInput = React.createRef();\n        this.endYearInput = React.createRef();\n        this.majorInput = React.createRef();\n        this.minorInput = React.createRef();\n        this.titleInput = React.createRef();\n\n        this.onDelete = this.onDelete.bind(this);\n        this.onUpdate = this.onUpdate.bind(this);\n        this.changePlan = this.changePlan.bind(this);\n        this.toggleModal = this.toggleModal.bind(this);\n        this.updateTitle = this.updateTitle.bind(this);\n        this.updateStartTerm = this.updateStartTerm.bind(this);\n        this.updateStartYear = this.updateStartYear.bind(this);\n        this.updateEndTerm = this.updateEndTerm.bind(this);\n        this.updateEndYear = this.updateEndYear.bind(this);\n        this.updateMajor = this.updateMajor.bind(this);\n        this.updateMinor = this.updateMinor.bind(this);\n        this.addPlan = this.addPlan.bind(this);\n        this.showAddSemester = this.showAddSemester.bind(this);\n        this.changeSelectedTerm = this.changeSelectedTerm.bind(this);\n        this.changeSelectedYear = this.changeSelectedYear.bind(this);\n        this.openDrawer = this.openDrawer.bind(this);\n        this.closeDrawer = this.closeDrawer.bind(this);\n        this.deletePlan = this.deletePlan.bind(this);\n        this.showDeletePlan = this.showDeletePlan.bind(this);\n        this.hideDeletePlan = this.hideDeletePlan.bind(this);\n        this.showEditDegrees = this.showEditDegrees.bind(this);\n        this.updateDegrees = this.updateDegrees.bind(this);\n        this.closeMinorErrorModal = this.closeMinorErrorModal.bind(this)\n        this.closeMajorErrorModal = this.closeMajorErrorModal.bind(this)\n        this.renderSemesters = this.renderSemesters.bind(this)\n    }\n\n    openDrawer(){\n        this.setState({\n            openDrawer: true\n        })\n    }\n    closeDrawer(){\n        this.setState({\n            openDrawer: false\n        })\n    }\n\n    format() {\n        const startSem = this.state.startTerm + ' ' + this.state.startYear;\n        const endSem = this.state.endTerm + ' ' + this.state.endYear\n        const noMajor = []\n        const enrollments = {'Colleges': {}};\n\n        if(this.state.majors.length === 0) {\n            return [0, 0, 0, 'majorError']\n        }\n\n        for (let i = 0; i < this.state.majors.length; i ++) {\n            if (this.state.majors[i]['value'][0] in enrollments['Colleges']) {\n                enrollments['Colleges'][this.state.majors[i]['value'][0]]['Majors'].push(this.state.majors[i]['value'][1])\n            } else {\n                enrollments['Colleges'][this.state.majors[i]['value'][0]] = {'Majors': [this.state.majors[i]['value'][1]], 'Minors': []}\n            }\n        }\n        for (let j = 0; j < this.state.minors.length; j ++) {\n            if (this.state.minors[j]['value'][0] in enrollments['Colleges']) {\n                enrollments['Colleges'][this.state.minors[j]['value'][0]]['Minors'].push(this.state.minors[j]['value'][1])\n            } else {\n                noMajor.push(this.state.minors[j]['value'][1])\n            }\n        }\n\n        if (noMajor.length > 0) {\n            return [startSem, endSem, enrollments, 'minorError']\n        }\n\n        return [startSem, endSem, enrollments, 'none']\n    }\n\n    addPlan() {\n        const inputs = this.format();\n        if (inputs[3]==='none') {\n            makePlan(inputs[0], inputs[1], inputs[2], this.state.title);\n            this.setState({\n                showModal: false,\n                title: null,\n                startTerm: \"Fall\",\n                startYear: 2016,\n                endTerm: \"Fall\",\n                endYear: 2021,\n                majors: majorOptions.filter(a => plans[plans.length - 1].majorNames.indexOf(a.label) !== -1),\n                minors: minorOptions.filter(a => plans[plans.length - 1].minorNames.indexOf(a.label) !== -1),\n                numPlans: plans.length\n        })\n        } \n\n        if (inputs[3]==='majorError') {\n            this.setState({\n                showMajorErrorModal: true,\n                majors: majorOptions.filter(a => plans[this.state.selectedPlan].majorNames.indexOf(a.label) !== -1),\n                minors: minorOptions.filter(a => plans[this.state.selectedPlan].minorNames.indexOf(a.label) !== -1),\n            })\n        }\n        \n        if (inputs[3]==='minorError') {\n            makePlan(inputs[0], inputs[1], inputs[2], this.state.title)\n            this.setState({\n                showMinorErrorModal: true,\n                title: null,\n                startTerm: \"Fall\",\n                startYear: 2016,\n                endTerm: \"Fall\",\n                endYear: 2021,\n                majors: majorOptions.filter(a => plans[this.state.numPlans + 1].majorNames.indexOf(a.label) !== -1),\n                minors: minorOptions.filter(a => plans[this.state.numPlans + 1].minorNames.indexOf(a.label) !== -1),\n                numPlans: plans.length\n                })\n        }\n    }\n\n    closeMajorErrorModal() {\n        this.setState({\n            showMajorErrorModal: false\n        })\n    }\n\n    closeMinorErrorModal() {\n        this.setState({\n            showMinorErrorModal: false\n        })\n    }\n\n    showDeletePlan() {\n        this.setState({\n            showDeletePlan: true\n        })\n    }\n\n    hideDeletePlan() {\n        this.setState({\n            showDeletePlan: false\n        })\n    }\n\n    deletePlan() {\n        deletePlan(this.state.selectedPlan)\n        this.setState({\n            numPlans: this.state.numPlans - 1,\n            selectedPlan: 0,\n            showDeletePlan: false\n        })\n        this.onUpdate();\n    }\n    \n    updateTitle() {\n        this.setState({title: this.titleInput.current.value})\n    }\n    updateStartTerm() {\n        this.setState({startTerm: this.startTermInput.current.value})\n    }\n\n    updateStartYear() {\n        this.setState({startYear: this.startYearInput.current.value})\n    }\n\n    updateEndTerm() {\n        this.setState({endTerm: this.endTermInput.current.value})\n    }\n\n    updateEndYear() {\n        this.setState({endYear: this.endYearInput.current.value})\n    }\n\n    updateMajor(option) {\n        const majors = [];\n        for(let i = 0; i < option.length; i++) {\n            majors.push(option[i])\n        }\n        this.setState({majors: majors})\n    }\n\n    updateMinor(option) {\n        const minors = [];\n        for(let i = 0; i < option.length; i++) {\n            minors.push(option[i])\n        }\n        this.setState({minors: minors})\n    }\n\n    updateDegrees() {\n        const inputs = this.format();\n        const enrollments = inputs[2]\n        if (inputs[3]==='majorError') {\n            this.setState({\n                showMajorErrorModal: true\n            })\n        }\n        \n        if (inputs[3]==='minorError') {\n            editDegrees(enrollments, this.state.selectedPlan)\n            this.setState({\n                showMinorErrorModal: true,\n                title: null,\n                startTerm: \"Fall\",\n                startYear: 2016,\n                endTerm: \"Fall\",\n                endYear: 2021\n                })\n            }\n\n        if (inputs[3]==='none') {\n            editDegrees(enrollments, this.state.selectedPlan)\n            this.setState({\n                showEditDegrees: false\n            })\n        }\n        this.onDelete()\n    }\n    \n    toggleModal() {\n        console.log(\"called\");\n        let bool = !this.state.showModal;\n        this.setState({\n            showModal: bool,\n            majors: majorOptions.filter(a => plans[this.state.selectedPlan].majorNames.indexOf(a.label) !== -1),\n            minors: minorOptions.filter(a => plans[this.state.selectedPlan].minorNames.indexOf(a.label) !== -1)\n        })\n        \n    }\n    onDelete() {\n        // gets called when a course is deleted in a semester,\n        // should update is then passed down to requirement so it knows to rerender the course that was deleted\n        this.setState({\n            shouldUpdate: true\n        })\n    }\n\n    onUpdate() {\n        // When course is rerendered, calls this method, changes shouldUpdate to false so it stops updating\n        this.setState({\n            shouldUpdate: false\n        })\n    }\n\n    renderSemesters() {\n        debugger;\n        var change = !this.state.semestersShouldUpdate\n        this.setState({\n            semestersShouldUpdate: change\n        })\n    }\n\n    changePlan(plan) {\n        this.setState({\n            selectedPlan: plan\n        })\n    }\n\n    showAddSemester() {\n        this.setState({\n            showAddSemester: true\n        })\n    }\n\n    changeSelectedTerm(event) {\n        const term = event.target.value\n        this.setState({\n            selectedTerm: term\n        })\n    }\n\n    changeSelectedYear(event) {\n        const year = event.target.value\n        this.setState({\n            selectedYear: year\n        })\n    }\n\n    addSemester(term, year) {\n        if ((term === 'Term') || (year === 'Year')) {\n            this.resetAddSemester();\n            return;\n        }\n        const semDate = term + ' ' + year;\n        const numSemesters = plans[this.state.selectedPlan].semesters.length\n        for (let i = 0; i < numSemesters; i++) {\n            if (plans[this.state.selectedPlan].semesters[i][0]===semDate) {\n                this.resetAddSemester();\n                return;\n            }\n            if (isEarlier(semDate, plans[this.state.selectedPlan].semesters[i][0])) {\n                plans[this.state.selectedPlan].semesters.splice(i, 0, [semDate, []])\n                break;\n            }\n        }\n        if (numSemesters === plans[this.state.selectedPlan].semesters.length) {\n            plans[this.state.selectedPlan].semesters.push([semDate, []])\n        }\n\n        this.resetAddSemester();\n    }\n\n    resetAddSemester() {\n        this.setState({\n            selectedTerm: 'Fall',\n            selectedYear: getListofYears()[0],\n            showAddSemester: false\n        })\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n    }\n\n    showEditDegrees(show) {\n        this.setState({\n            showEditDegrees: show\n        })\n    }\n\n    render() {\n        return (\n            <div className = \"Planner\">\n                <div className = \"CourseContainer\">\n                    <CategoryList \n                    //['College of Letters and Sciences', 'Data Science', 'Energy Engineering]\n                    categories = {plans[this.state.selectedPlan].collegeNames.concat(plans[this.state.selectedPlan].majorNames, plans[this.state.selectedPlan].minorNames)}\n                    //Concatenates all college, major, minor data\n                    data = {plans[this.state.selectedPlan].collegeData.concat(plans[this.state.selectedPlan].majorData, plans[this.state.selectedPlan].minorData)}\n                    onUpdate = {() => this.onUpdate()}\n                    shouldUpdate = {this.state.shouldUpdate}\n                    progress = {plans[this.state.selectedPlan]['totalProgress']()}\n                    selectedPlan = {plans[this.state.selectedPlan]}\n                    selectedPlanNum = {this.state.selectedPlan}\n                    planIndex = {this.state.selectedPlan}\n                    renderSemesters = {()=>this.renderSemesters()}/>\n                </div>\n                <Card className = 'PlanNav' bg = 'primary'>\n                    <Card.Header className = 'PlanHeader'>\n                        <span>\n                            <ThemeProvider theme = {theme}>\n                                <Tabs value = {this.state.selectedPlan}>\n                                {plans.map((plan, index) => {\n                                        return <Tab className = 'planTab' label = {plan['name']} onClick = {() => this.changePlan(index)} value={index}/>\n                                    })}\n                                </Tabs>\n                            </ThemeProvider>\n                        </span>\n                        <span>\n                            <ThemeProvider theme = {theme}>\n                                <Fab variant = 'extended' size = 'large' onClick = {() => this.toggleModal()} className='addPlanButton'>\n                                <img className = 'addPlanIcon' src={require(\"../../Images/plus.png\")} height=\"20\" width=\"20\"/> \n                                <a className = 'AddPlanText'>New Plan</a>\n                                </Fab>\n                            </ThemeProvider>\n                        </span>\n                        {/* <span>\n                        <Dropdown className=\"PlanDropdown\">\n                            <Dropdown.Toggle className=\"PlanToggle\">\n                                <NavbarBrand className = 'SelectedPlanHeader'>{plans[this.state.selectedPlan]['name']}</NavbarBrand>\n                            </Dropdown.Toggle>\n                            <Dropdown.Menu className = \"DropdownMenu\" alignLeft = {true}>\n                            {plans.map((plan, index) => {\n                                    if (index !== this.state.selectedPlan) {\n                                        return <div key={index}>\n                                                    <Dropdown.Item onClick = {() => this.changePlan(index)}  key = {index}>\n                                                        {plan['name']}\n                                                    </Dropdown.Item>\n                                                </div>\n                                    }\n                                })}\n                            </Dropdown.Menu>\n                        </Dropdown>\n                        </span> */}\n                        {/* <Nav variant = 'tabs'>\n                            {plans.map((plan, index) => \n                            <Nav.Item\n                            className = 'PlanOptionItem'\n                            style = {(this.state.selectedPlan === index)? {backgroundColor: '#5fa4ff'} : {}}\n                            key = {plans[index].name}>\n                                <Nav.Link\n                                style = {(plans[this.state.selectedPlan.name] === plan.name)? {fontWeight: 500, color: 'white'} : {color: 'white'}}\n                                className = 'PlanOption' \n                                onClick = {() => this.changePlan(index)}\n                                key = {plans[index].name}>\n                                {plans[index].name}\n                                </Nav.Link>\n                            </Nav.Item>\n                            )}\n                            <Nav.Item \n                            className = 'PlanOptionItem'>\n                                <Nav.Link onClick = {() => this.toggleModal()}\n                                className='AddPlanButton'>\n                                    +\n                                </Nav.Link>\n                            </Nav.Item>\n                        </Nav> */}\n                    </Card.Header>\n                    <Card.Body className = 'PlanCardBody'>\n                        <FourYearPlan\n                            semesters = {plans[this.state.selectedPlan].semesters} \n                            onDelete = {() => this.onDelete()}\n                            selectedPlan = {plans[this.state.selectedPlan]}\n                            planIndex = {this.state.selectedPlan}\n                            semestersShouldUpdate = {this.state.semestersShouldUpdate}/>\n                    </Card.Body>\n                    <Card.Footer className = 'PlanFooter'>\n                        <span className = 'PlanOptions'>\n                            <Tooltip title = \"Add Semester\" TransitionComponent={Fade} TransitionProps={{ timeout: {enter: 600, exit: 100}}}>\n                                <IconButton className = 'PlanOptionsButton' onClick = {()=>this.showAddSemester()}>\n                                    <img src={require(\"../../Images/addSemester.png\")} height=\"25\" width=\"25\"/>\n                                </IconButton>\n                            </Tooltip>\n                            <Tooltip title = \"Edit Degrees\" TransitionComponent={Fade} TransitionProps={{ timeout: {enter: 600, exit: 100}}}>\n                                <IconButton className = 'PlanOptionsButton' onClick = {() => this.showEditDegrees(true)}>\n                                    <img src={require(\"../../Images/editDegrees.png\")} height=\"25\" width=\"25\"/>\n                                </IconButton>\n                            </Tooltip>\n                            <Tooltip title = 'Download Plan' TransitionComponent={Fade} TransitionProps={{ timeout: {enter: 600, exit: 100}}}>\n                                <IconButton className = 'PlanOptionsButton' onClick = {this.createAndDownloadPdf}>\n                                    <img src={require(\"../../Images/exportPlan.png\")} height=\"25\" width=\"25\"/>\n                                </IconButton>\n                            </Tooltip>\n                            <Tooltip title = 'Delete Plan' TransitionComponent={Fade} TransitionProps={{ timeout: {enter: 600, exit: 100}}}>\n                                <IconButton className = 'PlanOptionsButton' onClick = {()=>this.showDeletePlan()}>\n                                    <img src={require(\"../../Images/deletePlan.png\")} height=\"25\" width=\"25\"/>\n                                </IconButton>\n                            </Tooltip>\n                        </span>\n                        {/* <span>\n                            <ThemeProvider theme = {theme}>\n                                <Fab variant = 'extended' size = 'large' onClick = {() => this.toggleModal()} className='addSemesterButton'>\n                                <img className = 'addPlanIcon' src={require(\"../../Images/plus.png\")} height=\"20\" width=\"20\"/> \n                                <a className = 'AddPlanText'> Semester</a>\n                                </Fab>\n                            </ThemeProvider>\n                        </span> */}\n                        \n                            {/* <Nav.Item as = {Button}\n                            className = \"addSemester\" \n                            variant = {this.state.showAddSemester? 'light' : 'outline-light'}\n                            onClick = {() => this.showAddSemester()}\n                            >\n                            Add Semester\n                            </Nav.Item>\n                                {this.state.showAddSemester && \n                                <>\n                                <Nav.Item className = \"selectTerm\">\n                                    <DropdownButton \n                                    title = {this.state.selectedTerm}\n                                    variant = 'outline-light'\n                                    drop = {'up'}\n                                    >\n                                        {[\"Fall\", \"Spring\", \"Summer\"].filter(a => a !== this.state.selectedTerm).map((term, index) => \n                                        {return (\n                                            <Dropdown.Item onClick = {() => this.changeSelectedTerm(term)}>{term}</Dropdown.Item>\n                                        )})}\n                                    </DropdownButton>\n                                </Nav.Item>\n                                <Nav.Item className = 'selectYear'>\n                                    <DropdownButton \n                                    title = {this.state.selectedYear}\n                                    variant = 'outline-light'\n                                    drop = {'up'}\n                                    >\n                                        {getListofYears().filter(a => a !== this.state.selectedYear).map((year, index) => \n                                        {return (\n                                            <Dropdown.Item onClick = {() => this.changeSelectedYear(year)}>{year}</Dropdown.Item>\n                                        )})}\n                                    </DropdownButton>\n                                </Nav.Item>\n                                <Nav.Item className = \"confirmAddSemester\">\n                                    <ButtonGroup>\n                                        <Button\n                                        variant = 'outline-light'\n                                        onClick = {()=>this.addSemester(this.state.selectedTerm, this.state.selectedYear)}>\n                                        Add\n                                        </Button>\n                                        <Button\n                                        variant = 'outline-light'\n                                        onClick = {()=>this.resetAddSemester()}>\n                                        Cancel\n                                        </Button>\n                                    </ButtonGroup>\n                                </Nav.Item>\n                                </>\n                                }\n                            <Nav.Item as = {Button}\n                                className = \"editDegrees\" \n                                variant = 'outline-light'\n                                >\n                                Edit Degrees\n                            </Nav.Item> */}\n\n                        \n                    </Card.Footer>\n                </Card>\n\n                {/* EDIT DEGREES MODAL */}\n                <Modal show = {this.state.showEditDegrees} onHide = {() => this.showEditDegrees(false)}>\n                    <Modal.Header>\n                        <Modal.Title>Edit Degrees</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                    <Form onSubmit = {this.handleSubmit}>\n                        <Form.Group controlId=\"editMajors\">\n                                <Form.Label>\n                                    Majors\n                                </Form.Label>\n                                <Select\n                                    defaultValue = {majorOptions.filter(a => plans[this.state.selectedPlan].majorNames.indexOf(a.label) !== -1)}\n                                    isMulti\n                                    name=\"intendedMinors\"\n                                    className=\"intendedMinors\"\n                                    options={majorOptions}\n                                    placeHolder=\"Intended Major(s)\" \n                                    onChange = {this.updateMajor}\n                                    ref = {this.majorInput}\n                                />\n                        </Form.Group>\n                        <Form.Group controlId=\"editMinors\">\n                                <Form.Label>\n                                    Minors\n                                </Form.Label>\n                                <Select\n                                    defaultValue = {minorOptions.filter(a => plans[this.state.selectedPlan].minorNames.indexOf(a.label) !== -1)}\n                                    isMulti\n                                    name=\"intendedMinors\"\n                                    className=\"intendedMinors\"\n                                    options={minorOptions}\n                                    placeHolder=\"Intended Minor(s)\" \n                                    onChange = {this.updateMinor}\n                                    ref = {this.minorInput}   \n                                />\n                        </Form.Group>\n                        <Button className=\"addButton\" variant=\"primary\" type=\"submit\" onClick={() => this.updateDegrees()}>\n                            Done\n                        </Button>\n                    </Form>\n                    </Modal.Body>\n                </Modal>\n\n                {/* ADD NEW PLAN MODAL */}\n                <Modal show={this.state.showModal} onHide = {this.toggleModal}>\n                    <Modal.Header closeButton >\n                        <Modal.Title>Add a plan</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                    <Form onSubmit = {this.handleSubmit}>\n                        <Form.Group controlId=\"planTitle\">\n                            <Form.Label>\n                                Plan Title\n                            </Form.Label>\n                            <Form.Control type=\"text\" placeHolder = \"Enter name\" onChange = {this.updateTitle} ref = {this.titleInput}/>\n                        </Form.Group>\n                        \n                        <Form.Group controlId=\"selectFirstTerm\">\n                            <Form.Label>\n                                Select first semester\n                            </Form.Label>\n                            <Row>\n                                <Col>\n                                    <Form.Control as=\"select\" placeHolder=\"Term\" onChange = {this.updateStartTerm} ref={ this.startTermInput }>\n                                        <option>Fall</option>\n                                        <option>Spring</option>\n                                        <option>Summer</option>\n                                    </Form.Control>\n                                </Col>\n                                <Col>\n                                    <Form.Control as=\"select\" placeHolder=\"Year\" onChange = {this.updateStartYear} ref={ this.startYearInput }>\n                                        <option>2016</option>\n                                        <option>2017</option>\n                                        <option>2018</option>\n                                        <option>2019</option>\n                                        <option>2020</option>\n                                    </Form.Control>\n                                </Col>\n                            </Row>\n                        </Form.Group>\n                        <Form.Group controlId=\"selectLastTerm\">\n                            <Form.Label>\n                                Select last semester\n                            </Form.Label>\n                            <Row>\n                                <Col>\n                                    <Form.Control as=\"select\" placeHolder=\"Term\" onChange = {this.updateEndTerm} ref={ this.endTermInput }>\n                                        <option>Fall</option>\n                                        <option>Spring</option>\n                                        <option>Summer</option>\n                                    </Form.Control>\n                                </Col>\n                                <Col>\n                                    <Form.Control as=\"select\" placeHolder=\"Year\"\n                                     onChange = {this.updateEndYear} ref={ this.endYearInput }>\n                                        <option>2020</option>\n                                        <option>2021</option>\n                                        <option>2022</option>\n                                        <option>2023</option>\n                                        <option>2024</option>\n                                    </Form.Control>\n                                </Col>\n                            </Row>\n                        </Form.Group>\n                        <Form.Group controlId=\"selectMajor\">\n                            <Form.Label>\n                                Select a Major\n                            </Form.Label>\n                            <Select\n                                defaultValue = {majorOptions.filter(a => plans[this.state.selectedPlan].majorNames.indexOf(a.label) !== -1)}\n                                isMulti\n                                name=\"intendedMinors\"\n                                className=\"intendedMinors\"\n                                options={majorOptions}\n                                placeHolder=\"Intended Major(s)\" \n                                onChange = {this.updateMajor}\n                                ref = {this.majorInput}   \n                            />\n                        </Form.Group>\n                        <Form.Group controlId=\"selectMinor\">\n                            <Form.Label>\n                                Select a Minor\n                            </Form.Label>\n                            <Select\n                                defaultValue = {minorOptions.filter(a => plans[this.state.selectedPlan].minorNames.indexOf(a.label) !== -1)}\n                                isMulti\n                                name=\"intendedMinors\"\n                                className=\"intendedMinors\"\n                                options={minorOptions}\n                                placeHolder=\"Intended Minor(s)\" \n                                onChange = {this.updateMinor}\n                                ref = {this.minorInput}   \n                            />\n                        </Form.Group>\n                        <Button className=\"addButton\" variant=\"primary\" type=\"submit\" onClick={() => this.addPlan()}>\n                            Add\n                        </Button>\n                    </Form>\n                    </Modal.Body>\n                </Modal>\n\n                {/* MAJOR ERROR MODAL */}\n                <Modal show = {this.state.showMajorErrorModal} onHide = {() => this.closeMajorErrorModal()}>\n                    <Modal.Body>\n                        You must have at least one major. \n                    </Modal.Body>\n                </Modal>\n\n                {/* MINOR ERROR MODAL */}\n                <Modal show = {this.state.showMinorErrorModal} onHide = {() => this.closeMinorErrorModal()}>\n                    <Modal.Body>\n                        You cannot complete a minor without completing a major in the same college. \n                    </Modal.Body>\n                </Modal>\n\n                {/* ADD NEW SEMESTER MODAL */}\n                <Modal show={this.state.showAddSemester} onHide = {()=>this.resetAddSemester()}>\n                    <Modal.Header closeButton >\n                        <Modal.Title>Add a Semester</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                    <Form onSubmit = {this.handleSubmit}>\n                        <Form.Group controlId=\"selectTerm\">\n                            <Row>\n                                <Col>\n                                    <Form.Control as=\"select\" placeHolder=\"Term\" onChange = {this.changeSelectedTerm} value = {this.state.selectedTerm}>\n                                    {[\"Fall\", \"Spring\", \"Summer\"].map((term, index) => \n                                        {return (\n                                            <option value = {term}>{term}</option>\n                                        )})}\n                                    </Form.Control>\n                                </Col>\n                                <Col>\n                                    <Form.Control as=\"select\" placeHolder=\"Year\" onChange = {this.changeSelectedYear} value = {this.state.selectedYear}>\n                                        {getListofYears().map((year, index) => \n                                        {return (\n                                            <option value = {year}>{year}</option>\n                                        )})}\n                                    </Form.Control>\n                                </Col>\n                            </Row>\n                        </Form.Group>\n                        <Button className=\"addButton\" variant=\"primary\" type=\"submit\" onClick={() => this.addSemester(this.state.selectedTerm, this.state.selectedYear)}>\n                            Add\n                        </Button>\n                    </Form>\n                    </Modal.Body>\n                </Modal>\n\n                {/* DELETE PLAN CONFIRMATION MODAL */}\n                <Modal show = {this.state.showDeletePlan} onHide = {()=>this.hideDeletePlan()}>\n                    {(this.state.numPlans > 1) && \n                    <Modal.Header>\n                        <Modal.Title>\n                            Delete '{plans[this.state.selectedPlan]['name']}'?\n                        </Modal.Title>\n                        <Button onClick = {()=>this.deletePlan()}>\n                            Yes\n                        </Button>\n                        <Button onClick = {()=>this.hideDeletePlan()}> \n                            No\n                        </Button>\n                    </Modal.Header> }\n                    {(this.state.numPlans <= 1) &&\n                    <Modal.Header>\n                        <Modal.Title>\n                            You can't delete your only plan!\n                        </Modal.Title>\n                    </Modal.Header>}\n                </Modal>\n            </div>\n        ) \n    }\n}\n\nconst theme = createMuiTheme({\n    overrides: {\n      // Style sheet name ⚛️\n      MuiTabs: {\n          indicator: {\n              color: '#ffffff',\n              backgroundColor: \"#ffffff\"\n    },\n    }, MuiFab: {\n        extended:{\n            width: '130px',\n            padding: '0px',\n            height: '95%'\n        }\n    }\n  }});\n\nexport default Planner;\n\n{/* <Form.Group controlId=\"formFirstName\">\n                        <Form.Row>\n                            <Col>\n                            <Form.Control\n                                type=\"firstName\"\n                                name=\"firstName\"\n                                placeholder=\"First Name\"\n                                value=\"Dino\"\n                                onChange={handleChange('firstName')}\n                                />              \n                            </Col>\n                            <Col>\n                            <Form.Control\n                                type=\"lastName\"\n                                name=\"lastName\"\n                                placeholder=\"Last Name\"\n                                value=\"Ambrosi\"\n                                onChange={handleChange('lastName')}\n                            />\n                            </Col>\n                        </Form.Row>\n                        </Form.Group>\n                        <Form.Group controlId=\"formEmailAddress\">\n                        <Form.Control\n                            type=\"email\"\n                            name=\"email\"\n                            placeholder=\"Email Address\"\n                            value=\"dino.ambrosi@berkeley.edu\"\n                            onChange={handleChange('email')}\n                            />\n                        </Form.Group>\n                        <Form.Group controlId=\"formPassword\">\n                        <Form.Control\n                            type=\"password\"\n                            name=\"password\"\n                            placeholder=\"Password\"\n                            value=\"dinguspingus\"\n                            onChange={handleChange('password')}\n                        />\n                        </Form.Group>\n                        <Form.Group>\n                        <Form.Row>\n                            <Col>\n                            <Form.Control\n                                as=\"select\"\n                                type=\"firstYear\"\n                                name=\"firstYear\"\n                                placeholder=\"First Year\"\n                                value='2017'\n                                onChange={handleChange('firstYear')}\n                                >\n                                <option>First Year</option>\n                                <option>2015</option>\n                                <option>2016</option>\n                                <option>2017</option>\n                                <option>2018</option>\n                                <option>2019</option>\n                            </Form.Control>\n                            </Col>\n                            <Col>\n                            <Form.Check\n                                checked={values.firstSemester === 'Fall'}\n                                onChange={handleChange('firstSemester')}\n                                inline\n                                type=\"radio\"\n                                name=\"firstSemester\"\n                                label=\"Fall\"\n                                value=\"Fall\" />\n                            <Form.Check\n                                checked={values.firstSemester === 'Spring'}\n                                onChange={handleChange('firstSemester')}\n                                inline\n                                type=\"radio\"\n                                label=\"Spring\"\n                                name=\"firstSemester\"\n                                value=\"Spring\" />\n                            </Col>\n                        </Form.Row>\n                        </Form.Group>\n                        <Form.Group>\n                        <Form.Row>\n                            <Col>\n                            <Form.Control\n                                as=\"select\"\n                                type=\"lastYear\"\n                                name=\"lastYear\"\n                                placeholder=\"Last Year\"\n                                value={values.lastYear}\n                                onChange={handleChange('lastYear')}\n                            >\n                                <option>Last Year</option>\n                                <option>2019</option>\n                                <option>2020</option>\n                                <option>2021</option>\n                                <option>2022</option>\n                                <option>2023</option>\n                            </Form.Control>\n                            </Col>\n                            <Col>\n                            <Form.Check\n                                checked={values.lastSemester === 'Fall'}\n                                onChange={handleChange('lastSemester')}\n                                inline\n                                type=\"radio\"\n                                name=\"lastSemester\"\n                                label=\"Fall\"\n                                value=\"Fall\" />\n                            <Form.Check\n                                checked={values.lastSemester === 'Spring'}\n                                onChange={handleChange('lastSemester')}\n                                inline\n                                type=\"radio\"\n                                label=\"Spring\"\n                                name=\"lastSemester\"\n                                value=\"Spring\" />\n                            </Col>\n                        </Form.Row>\n                        </Form.Group>\n                        <Form.Group>\n                        <Select\n                            isMulti\n                            name=\"intendedMajors\"\n                            className=\"intendedMajors\"\n                            options={majorOptions}\n                            placeholder=\"Intended Major(s)\"\n                            onChange={(e) => (handleMajorChange(e))}\n                        />\n                        </Form.Group>\n                        <Form.Group>\n                        <Select\n                            isMulti\n                            name=\"intendedMinors\"\n                            className=\"intendedMinors\"\n                            options={minorOptions}\n                            placeholder=\"Intended Minor(s)\"\n                            onChange={(e) => (handleMinorChange(e))}\n                        />\n                        </Form.Group>\n                        <Button variant=\"primary\" onClick={this.back}>\n                        Back\n                        </Button>\n                        <Button variant=\"primary\" onClick={this.next}>\n                        Next\n                        </Button> */}"]},"metadata":{},"sourceType":"module"}